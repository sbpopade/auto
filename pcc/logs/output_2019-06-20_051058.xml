<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190619 22:10:59.007" generator="Robot 3.1.2 (Python 2.7.9 on linux2)">
<suite source="/home/vmahesh/pcc/pcc/test_suite/auto_pcc_regression_suite.robot" id="s1" name="Auto Pcc Regression Suite">
<kw type="setup" name="Verify User Login" library="Resource_Keywords">
<kw name="Create Session" library="Request">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>platina</arg>
<arg>${server_url}</arg>
<arg>verify=False</arg>
</arguments>
<msg timestamp="20190619 22:10:59.502" level="INFO">Creating Session using : alias=platina, url=https://172.17.2.46:9999, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190619 22:10:59.503" starttime="20190619 22:10:59.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${user_name}</arg>
<arg>password=${user_pwd}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:10:59.504" level="INFO">&amp;{data} = { username=admin | password=admin }</msg>
<status status="PASS" endtime="20190619 22:10:59.504" starttime="20190619 22:10:59.503"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${login}</arg>
<arg>json=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:10:59.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:10:59.670" starttime="20190619 22:10:59.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:10:59.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:10:59.671" starttime="20190619 22:10:59.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Bearer</arg>
<arg>${resp.json()['token']}</arg>
</arguments>
<assign>
<var>${bearer_token}</var>
</assign>
<msg timestamp="20190619 22:10:59.672" level="INFO">${bearer_token} = Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw</msg>
<status status="PASS" endtime="20190619 22:10:59.672" starttime="20190619 22:10:59.671"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${sec_token}</arg>
<arg>${bearer_token}</arg>
</arguments>
<msg timestamp="20190619 22:10:59.674" level="INFO">${sec_token} = Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw</msg>
<status status="PASS" endtime="20190619 22:10:59.674" starttime="20190619 22:10:59.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Authorization=${sec_token}</arg>
</arguments>
<assign>
<var>&amp;{auth_header}</var>
</assign>
<msg timestamp="20190619 22:10:59.675" level="INFO">&amp;{auth_header} = { Authorization=Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw }</msg>
<status status="PASS" endtime="20190619 22:10:59.675" starttime="20190619 22:10:59.674"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${headers}</arg>
<arg>${auth_header}</arg>
</arguments>
<msg timestamp="20190619 22:10:59.677" level="INFO">${headers} = {u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbt...</msg>
<status status="PASS" endtime="20190619 22:10:59.677" starttime="20190619 22:10:59.675"></status>
</kw>
<status status="PASS" endtime="20190619 22:10:59.677" starttime="20190619 22:10:59.502"></status>
</kw>
<test id="s1-t1" name="PCC-Tenant-Creation">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${tenant2_name}</arg>
<arg>description=${tenant2_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:10:59.678" level="INFO">&amp;{data} = { name=test02_tenant | description=test02_tenant }</msg>
<status status="PASS" endtime="20190619 22:10:59.678" starttime="20190619 22:10:59.678"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_tenant}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:10:59.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:10:59.776" starttime="20190619 22:10:59.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:10:59.777" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:10:59.777" starttime="20190619 22:10:59.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:10:59.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:10:59.778" starttime="20190619 22:10:59.777"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190619 22:11:09.778" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190619 22:11:09.779" starttime="20190619 22:10:59.778"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${tenant_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:09.842" level="INFO">Get Request using : alias=platina, uri=/user-management/tenant/list/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:11:09.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:09.842" starttime="20190619 22:11:09.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:09.843" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:09.843" starttime="20190619 22:11:09.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:09.844" level="INFO">
Response = [{u'description': u'the root tenant', u'parent': None, u'entityIDs': [1, 2, 3, 4, 5, 6, 7], u'children': [34], u'entityNames': [u'security', u'pccserver', u'user-management', u'maas', u'key-manager', u'monitor', u'mailer'], u'owner': 1, u'nodes': [], u'id': 1, u'name': u'ROOT'}, {u'description': u'test02_tenant', u'parent': 1, u'id': 34, u'owner': 34, u'nodes': [], u'children': [], u'name': u'test02_tenant'}]</msg>
<status status="PASS" endtime="20190619 22:11:09.844" starttime="20190619 22:11:09.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:09.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:09.845" starttime="20190619 22:11:09.844"></status>
</kw>
<kw name="Get Tenant Id" library="Data_Parser">
<doc>get tenant id from tenant list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${tenant2_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${tenant_id}</var>
</assign>
<msg timestamp="20190619 22:11:09.846" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:11:09.846" level="INFO">${tenant_id} = 34</msg>
<status status="PASS" endtime="20190619 22:11:09.846" starttime="20190619 22:11:09.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Tenant ${tenant2_name} is not present in node list</arg>
</arguments>
<msg timestamp="20190619 22:11:09.846" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:09.847" starttime="20190619 22:11:09.846"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${tenant2_id}</arg>
<arg>${tenant_id}</arg>
</arguments>
<msg timestamp="20190619 22:11:09.849" level="INFO">${tenant2_id} = 34</msg>
<status status="PASS" endtime="20190619 22:11:09.849" starttime="20190619 22:11:09.847"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n tenant ID = ${tenant2_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:09.850" level="INFO">
tenant ID = 34</msg>
<status status="PASS" endtime="20190619 22:11:09.850" starttime="20190619 22:11:09.849"></status>
</kw>
<doc>Adding a new Tenant</doc>
<tags>
<tag>regression_test</tag>
<tag>Tenant Mgmt</tag>
</tags>
<status status="PASS" endtime="20190619 22:11:09.850" critical="yes" starttime="20190619 22:10:59.677"></status>
</test>
<test id="s1-t2" name="PCC-Sub-Tenant-Creation">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${tenant3_name}</arg>
<arg>description=${tenant3_desc}</arg>
<arg>parent=${tenant2_id}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:11:09.852" level="INFO">&amp;{data} = { name=test03_tenant | description=test03_tenant | parent=34 }</msg>
<status status="PASS" endtime="20190619 22:11:09.852" starttime="20190619 22:11:09.851"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_tenant}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:09.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:09.937" starttime="20190619 22:11:09.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:09.938" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:09.938" starttime="20190619 22:11:09.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:09.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:09.939" starttime="20190619 22:11:09.938"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190619 22:11:19.939" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190619 22:11:19.940" starttime="20190619 22:11:09.939"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${tenant_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:20.009" level="INFO">Get Request using : alias=platina, uri=/user-management/tenant/list/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:11:20.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:20.009" starttime="20190619 22:11:19.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:20.010" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:20.010" starttime="20190619 22:11:20.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:20.011" level="INFO">
Response = [{u'description': u'the root tenant', u'parent': None, u'entityIDs': [1, 2, 3, 4, 5, 6, 7], u'children': [34, 35], u'entityNames': [u'security', u'pccserver', u'user-management', u'maas', u'key-manager', u'monitor', u'mailer'], u'owner': 1, u'nodes': [], u'id': 1, u'name': u'ROOT'}, {u'description': u'test02_tenant', u'parent': 1, u'id': 34, u'owner': 34, u'nodes': [], u'children': [35], u'name': u'test02_tenant'}, {u'description': u'test03_tenant', u'parent': 34, u'id': 35, u'owner': 35, u'nodes': [], u'children': [], u'name': u'test03_tenant'}]</msg>
<status status="PASS" endtime="20190619 22:11:20.011" starttime="20190619 22:11:20.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:20.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:20.012" starttime="20190619 22:11:20.011"></status>
</kw>
<kw name="Get Tenant Id" library="Data_Parser">
<doc>get tenant id from tenant list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${tenant3_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${tenant_id}</var>
</assign>
<msg timestamp="20190619 22:11:20.013" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:11:20.013" level="INFO">${tenant_id} = 35</msg>
<status status="PASS" endtime="20190619 22:11:20.013" starttime="20190619 22:11:20.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Tenant ${tenant3_name} is not present in node list</arg>
</arguments>
<msg timestamp="20190619 22:11:20.014" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:20.014" starttime="20190619 22:11:20.013"></status>
</kw>
<kw name="Verify Parent Tenant" library="Data_Parser">
<doc>Verify Tenant Parent</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${tenant3_name}</arg>
<arg>${tenant2_id}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20190619 22:11:20.014" level="INFO">${status} = (False, None)</msg>
<status status="PASS" endtime="20190619 22:11:20.015" starttime="20190619 22:11:20.014"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${tenant3_id}</arg>
<arg>${tenant_id}</arg>
</arguments>
<msg timestamp="20190619 22:11:20.017" level="INFO">${tenant3_id} = 35</msg>
<status status="PASS" endtime="20190619 22:11:20.017" starttime="20190619 22:11:20.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n tenant ID = ${tenant3_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:20.018" level="INFO">
tenant ID = 35</msg>
<status status="PASS" endtime="20190619 22:11:20.018" starttime="20190619 22:11:20.017"></status>
</kw>
<doc>Adding a New Sub-Tenant</doc>
<tags>
<tag>regression_test</tag>
<tag>Tenant Mgmt</tag>
</tags>
<status status="PASS" endtime="20190619 22:11:20.018" critical="yes" starttime="20190619 22:11:09.850"></status>
</test>
<test id="s1-t3" name="PCC-Sub-Tenant-Deletion">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${tenant3_id}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:11:20.020" level="INFO">&amp;{data} = { id=35 }</msg>
<status status="PASS" endtime="20190619 22:11:20.020" starttime="20190619 22:11:20.019"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${delete_tenant}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:20.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:20.097" starttime="20190619 22:11:20.020"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:20.097" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:20.098" starttime="20190619 22:11:20.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:20.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:20.098" starttime="20190619 22:11:20.098"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190619 22:11:30.099" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190619 22:11:30.099" starttime="20190619 22:11:20.099"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${tenant_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:30.157" level="INFO">Get Request using : alias=platina, uri=/user-management/tenant/list/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:11:30.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:30.158" starttime="20190619 22:11:30.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:30.158" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:30.158" starttime="20190619 22:11:30.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:30.159" level="INFO">
Response = [{u'description': u'the root tenant', u'parent': None, u'entityIDs': [1, 2, 3, 4, 5, 6, 7], u'children': [34], u'entityNames': [u'security', u'pccserver', u'user-management', u'maas', u'key-manager', u'monitor', u'mailer'], u'owner': 1, u'nodes': [], u'id': 1, u'name': u'ROOT'}, {u'description': u'test02_tenant', u'parent': 1, u'id': 34, u'owner': 34, u'nodes': [], u'children': [], u'name': u'test02_tenant'}]</msg>
<status status="PASS" endtime="20190619 22:11:30.159" starttime="20190619 22:11:30.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:30.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:30.160" starttime="20190619 22:11:30.160"></status>
</kw>
<kw name="Get Tenant Id" library="Data_Parser">
<doc>get tenant id from tenant list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${tenant3_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${tenant_id}</var>
</assign>
<msg timestamp="20190619 22:11:30.161" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:11:30.161" level="INFO">${tenant_id} = None</msg>
<status status="PASS" endtime="20190619 22:11:30.161" starttime="20190619 22:11:30.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Tenant ${tenant3_name} not deleted</arg>
</arguments>
<msg timestamp="20190619 22:11:30.162" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:30.162" starttime="20190619 22:11:30.161"></status>
</kw>
<doc>Delete Existing Sub-Tenant</doc>
<tags>
<tag>regression_test</tag>
<tag>Tenant Mgmt</tag>
</tags>
<status status="PASS" endtime="20190619 22:11:30.162" critical="yes" starttime="20190619 22:11:20.018"></status>
</test>
<test id="s1-t4" name="PCC-Tenant-Deletion">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${tenant2_id}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:11:30.164" level="INFO">&amp;{data} = { id=34 }</msg>
<status status="PASS" endtime="20190619 22:11:30.164" starttime="20190619 22:11:30.163"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${delete_tenant}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:30.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:30.258" starttime="20190619 22:11:30.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:30.258" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:30.258" starttime="20190619 22:11:30.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:30.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:30.259" starttime="20190619 22:11:30.259"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190619 22:11:40.260" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190619 22:11:40.260" starttime="20190619 22:11:30.259"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${tenant_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:11:40.307" level="INFO">Get Request using : alias=platina, uri=/user-management/tenant/list/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:11:40.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:11:40.308" starttime="20190619 22:11:40.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:40.308" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:11:40.309" starttime="20190619 22:11:40.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:11:40.309" level="INFO">
Response = [{u'description': u'the root tenant', u'parent': None, u'entityIDs': [1, 2, 3, 4, 5, 6, 7], u'children': [], u'entityNames': [u'security', u'pccserver', u'user-management', u'maas', u'key-manager', u'monitor', u'mailer'], u'owner': 1, u'nodes': [], u'id': 1, u'name': u'ROOT'}]</msg>
<status status="PASS" endtime="20190619 22:11:40.309" starttime="20190619 22:11:40.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:11:40.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:40.310" starttime="20190619 22:11:40.310"></status>
</kw>
<kw name="Get Tenant Id" library="Data_Parser">
<doc>get tenant id from tenant list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${tenant2_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${tenant_id}</var>
</assign>
<msg timestamp="20190619 22:11:40.311" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:11:40.311" level="INFO">${tenant_id} = None</msg>
<status status="PASS" endtime="20190619 22:11:40.311" starttime="20190619 22:11:40.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Tenant ${tenant3_name} not deleted</arg>
</arguments>
<msg timestamp="20190619 22:11:40.312" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:11:40.312" starttime="20190619 22:11:40.311"></status>
</kw>
<doc>Delete Existing Tenant</doc>
<tags>
<tag>regression_test</tag>
<tag>Tenant Mgmt</tag>
</tags>
<status status="PASS" endtime="20190619 22:11:40.312" critical="yes" starttime="20190619 22:11:30.163"></status>
</test>
<test id="s1-t5" name="Pcc-node-summary-add-node">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${node1_name}</arg>
<arg>Host=${node1_host_addr}</arg>
<arg>bmc=${node1_bmc}</arg>
<arg>bmcUser=${node1_bmc_user}</arg>
<arg>bmcPassword=${node1_bmc_pwd}</arg>
<arg>bmcUsers=@{bmc_users}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:11:40.316" level="INFO">&amp;{data} = { Name=i30 | Host=172.17.2.29 | bmc=172.17.3.29 | bmcUser=ADMIN | bmcPassword=ADMIN | bmcUsers=[u'Create List', u'ADMIN'] }</msg>
<status status="PASS" endtime="20190619 22:11:40.317" starttime="20190619 22:11:40.313"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:12:03.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:12:03.935" starttime="20190619 22:11:40.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:12:03.936" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:12:03.936" starttime="20190619 22:12:03.935"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:12:03.937" level="INFO">
Response = {u'status': 200, u'path': u'/node/add/', u'message': u'', u'Data': {u'managed': None, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007114136, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'', u'Id': 26}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:12:03.937" starttime="20190619 22:12:03.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:12:03.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:12:03.938" starttime="20190619 22:12:03.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:12:03.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:12:03.939" starttime="20190619 22:12:03.938"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60s</arg>
</arguments>
<msg timestamp="20190619 22:13:03.939" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20190619 22:13:03.940" starttime="20190619 22:12:03.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:13:03.941" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:13:03.941" starttime="20190619 22:13:03.940"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:13:04.052" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:13:04.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:13:04.052" starttime="20190619 22:13:03.941"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190619 22:13:07.053" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190619 22:13:07.053" starttime="20190619 22:13:04.052"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:13:07.138" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:13:07.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:13:07.138" starttime="20190619 22:13:07.053"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190619 22:13:10.139" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190619 22:13:10.139" starttime="20190619 22:13:07.138"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:13:10.287" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:13:10.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.287" starttime="20190619 22:13:10.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.288" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:13:10.288" starttime="20190619 22:13:10.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.289" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007114136, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:13:10.289" starttime="20190619 22:13:10.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:10.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.290" starttime="20190619 22:13:10.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:10.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.291" starttime="20190619 22:13:10.290"></status>
</kw>
<kw name="Validate Node" library="Data_Parser">
<doc>find added node from node list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node_id}</var>
</assign>
<msg timestamp="20190619 22:13:10.292" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:13:10.292" level="INFO">${node_id} = 26</msg>
<status status="PASS" endtime="20190619 22:13:10.292" starttime="20190619 22:13:10.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Node ${node1_name} ID = ${node_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.293" level="INFO">
Node i30 ID = 26</msg>
<status status="PASS" endtime="20190619 22:13:10.293" starttime="20190619 22:13:10.292"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${node1_id}</arg>
<arg>${node_id}</arg>
</arguments>
<msg timestamp="20190619 22:13:10.295" level="INFO">${node1_id} = 26</msg>
<status status="PASS" endtime="20190619 22:13:10.296" starttime="20190619 22:13:10.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=node ${node1_name} is not present in node list</arg>
</arguments>
<msg timestamp="20190619 22:13:10.296" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.296" starttime="20190619 22:13:10.296"></status>
</kw>
<doc>Add node in the PCC</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:13:10.297" critical="yes" starttime="20190619 22:11:40.313"></status>
</test>
<test id="s1-t6" name="Pcc-node-summary-add-node-without-BMC-password">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${node2_name}</arg>
<arg>Host=${node2_host_addr}</arg>
<arg>bmc=${node2_bmc}</arg>
<arg>bmcUser=${node2_bmc_user}</arg>
<arg>bmcUsers=@{bmc_users}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:13:10.299" level="INFO">&amp;{data} = { Name=i31 | Host=172.17.2.29 | bmc=172.17.3.29 | bmcUser=ADMIN | bmcUsers=[u'Create List', u'ADMIN'] }</msg>
<status status="PASS" endtime="20190619 22:13:10.299" starttime="20190619 22:13:10.298"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:13:10.334" level="INFO">${resp} = &lt;Response [470]&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.334" starttime="20190619 22:13:10.299"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.335" level="INFO">
Status code = 470</msg>
<status status="PASS" endtime="20190619 22:13:10.335" starttime="20190619 22:13:10.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.335" level="INFO">
Response = {u'status': 470, u'path': u'/node/add/', u'message': u'password must not be blank', u'error': u'password must not be blank'}</msg>
<status status="PASS" endtime="20190619 22:13:10.336" starttime="20190619 22:13:10.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:10.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190619 22:13:10.336" level="FAIL">470 != 200</msg>
<status status="FAIL" endtime="20190619 22:13:10.336" starttime="20190619 22:13:10.336"></status>
</kw>
<doc>Add node in the PCC without BMC pass</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="FAIL" endtime="20190619 22:13:10.337" critical="yes" starttime="20190619 22:13:10.297">470 != 200</status>
</test>
<test id="s1-t7" name="Pcc-node-summary-add-node-managed-by-pcc">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:13:10.339" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:13:10.339" starttime="20190619 22:13:10.338"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:13:10.478" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:13:10.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.478" starttime="20190619 22:13:10.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.479" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:13:10.479" starttime="20190619 22:13:10.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:10.480" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007114136, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:13:10.480" starttime="20190619 22:13:10.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:10.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.481" starttime="20190619 22:13:10.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:10.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:10.481" starttime="20190619 22:13:10.481"></status>
</kw>
<kw name="Validate Node Manage Status" library="Data_Parser">
<doc>find added node manage status</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node1_name}</arg>
<arg>False</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20190619 22:13:10.483" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20190619 22:13:10.483" starttime="20190619 22:13:10.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=node manage status of ${node1_name} is True by default</arg>
</arguments>
<msg timestamp="20190619 22:13:10.483" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190619 22:13:10.484" level="FAIL">node manage status of i30 is True by default: False != True</msg>
<status status="FAIL" endtime="20190619 22:13:10.484" starttime="20190619 22:13:10.483"></status>
</kw>
<doc>Add node – managed-by-pcc check box should be not be checked by default</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="FAIL" endtime="20190619 22:13:10.484" critical="yes" starttime="20190619 22:13:10.337">node manage status of i30 is True by default: False != True</status>
</test>
<test id="s1-t8" name="Pcc-Node-summary-DeleteNode">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${node4_name}</arg>
<arg>Host=${node4_host_addr}</arg>
<arg>bmc=${node4_bmc}</arg>
<arg>bmcUser=${node4_bmc_user}</arg>
<arg>bmcPassword=${node4_bmc_pwd}</arg>
<arg>bmcUsers=@{bmc_users}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:13:10.486" level="INFO">&amp;{data} = { Name=i33 | Host=172.17.2.29 | bmc=172.17.3.29 | bmcUser=ADMIN | bmcPassword=ADMIN | bmcUsers=[u'Create List', u'ADMIN'] }</msg>
<status status="PASS" endtime="20190619 22:13:10.486" starttime="20190619 22:13:10.485"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:13:17.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:13:17.633" starttime="20190619 22:13:10.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:17.634" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:13:17.634" starttime="20190619 22:13:17.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:13:17.635" level="INFO">
Response = {u'status': 200, u'path': u'/node/add/', u'message': u'', u'Data': {u'managed': None, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007204302, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007204302, u'status': u'', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i33', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'', u'Id': 27}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:13:17.635" starttime="20190619 22:13:17.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:17.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:17.636" starttime="20190619 22:13:17.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:13:17.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:13:17.636" starttime="20190619 22:13:17.636"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60s</arg>
</arguments>
<msg timestamp="20190619 22:14:17.637" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20190619 22:14:17.637" starttime="20190619 22:13:17.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:14:17.639" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:14:17.639" starttime="20190619 22:14:17.638"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:14:17.784" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:14:17.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:14:17.784" starttime="20190619 22:14:17.639"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190619 22:14:20.785" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190619 22:14:20.785" starttime="20190619 22:14:17.784"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:14:20.955" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:14:20.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:14:20.955" starttime="20190619 22:14:20.786"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190619 22:14:23.956" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190619 22:14:23.956" starttime="20190619 22:14:20.955"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:14:24.110" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:14:24.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:14:24.110" starttime="20190619 22:14:23.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:14:24.111" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:14:24.111" starttime="20190619 22:14:24.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:14:24.112" level="INFO">
Response = {u'status': 200, u'links': {u'count': 3, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007114136, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007204302, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007204302, u'status': u'Match', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i33', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 27, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007231833}, u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 27}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:14:24.112" starttime="20190619 22:14:24.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:14:24.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:14:24.113" starttime="20190619 22:14:24.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:14:24.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:14:24.114" starttime="20190619 22:14:24.113"></status>
</kw>
<kw name="Validate Node" library="Data_Parser">
<doc>find added node from node list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node4_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node_id}</var>
</assign>
<msg timestamp="20190619 22:14:24.116" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:14:24.116" level="INFO">${node_id} = 27</msg>
<status status="PASS" endtime="20190619 22:14:24.116" starttime="20190619 22:14:24.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Node ${node4_name} ID = ${node_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:14:24.117" level="INFO">
Node i33 ID = 27</msg>
<status status="PASS" endtime="20190619 22:14:24.117" starttime="20190619 22:14:24.116"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${node4_id}</arg>
<arg>${node_id}</arg>
</arguments>
<msg timestamp="20190619 22:14:24.119" level="INFO">${node4_id} = 27</msg>
<status status="PASS" endtime="20190619 22:14:24.119" starttime="20190619 22:14:24.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${node4_id}</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20190619 22:14:24.120" level="INFO">@{data} = [ 27 ]</msg>
<status status="PASS" endtime="20190619 22:14:24.120" starttime="20190619 22:14:24.119"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${delete_node}</arg>
<arg>headers=${headers}</arg>
<arg>json=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:14:31.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:14:31.336" starttime="20190619 22:14:24.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:14:31.337" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:14:31.337" starttime="20190619 22:14:31.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:14:31.338" level="INFO">
Response = {u'status': 200, u'path': u'/node/delete/', u'message': u'', u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:14:31.338" starttime="20190619 22:14:31.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:14:31.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:14:31.339" starttime="20190619 22:14:31.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:14:31.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:14:31.340" starttime="20190619 22:14:31.339"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>40s</arg>
</arguments>
<msg timestamp="20190619 22:15:11.341" level="INFO">Slept 40 seconds</msg>
<status status="PASS" endtime="20190619 22:15:11.341" starttime="20190619 22:14:31.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:15:11.342" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:15:11.342" starttime="20190619 22:15:11.341"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:11.451" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:15:11.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.451" starttime="20190619 22:15:11.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:11.452" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:15:11.452" starttime="20190619 22:15:11.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:11.453" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1561007114136, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'bmc': u'172.17.3.29', u'bmcUser': u'ADMIN', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': None, u'standby': False, u'bmcUsers': [u'Create List', u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:15:11.453" starttime="20190619 22:15:11.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:11.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.454" starttime="20190619 22:15:11.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:11.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.455" starttime="20190619 22:15:11.454"></status>
</kw>
<kw name="Validate Node" library="Data_Parser">
<doc>find added node from node list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node4_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node_id}</var>
</assign>
<msg timestamp="20190619 22:15:11.456" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:15:11.456" level="INFO">${node_id} = None</msg>
<status status="PASS" endtime="20190619 22:15:11.456" starttime="20190619 22:15:11.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=node ${node4_name} is present in node list</arg>
</arguments>
<msg timestamp="20190619 22:15:11.457" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.457" starttime="20190619 22:15:11.457"></status>
</kw>
<doc>We can delete the Node</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:15:11.457" critical="yes" starttime="20190619 22:13:10.484"></status>
</test>
<test id="s1-t9" name="Pcc-node-summary-add-node-with-some-features">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${node3_name}</arg>
<arg>Host=${node3_host_addr}</arg>
<arg>bmc=${node3_bmc}</arg>
<arg>bmcPassword=${node3_bmc_pwd}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:15:11.459" level="INFO">&amp;{data} = { Name=i32 | Host=172.17.2.29 | bmc=172.17.3.29 | bmcPassword=ADMIN }</msg>
<status status="PASS" endtime="20190619 22:15:11.460" starttime="20190619 22:15:11.458"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:11.489" level="INFO">${resp} = &lt;Response [470]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.489" starttime="20190619 22:15:11.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:11.490" level="INFO">
Status code = 470</msg>
<status status="PASS" endtime="20190619 22:15:11.490" starttime="20190619 22:15:11.489"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:11.490" level="INFO">
Response = {u'status': 470, u'path': u'/node/add/', u'message': u'username must not be blank', u'error': u'username must not be blank'}</msg>
<status status="PASS" endtime="20190619 22:15:11.491" starttime="20190619 22:15:11.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:11.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190619 22:15:11.491" level="FAIL">470 != 200</msg>
<status status="FAIL" endtime="20190619 22:15:11.492" starttime="20190619 22:15:11.491"></status>
</kw>
<doc>Adding a node in PCC with all details except "BMC users" field</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="FAIL" endtime="20190619 22:15:11.492" critical="yes" starttime="20190619 22:15:11.458">470 != 200</status>
</test>
<test id="s1-t10" name="Pcc-Node-Group-Create">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${group1_name}</arg>
<arg>Description=${group1_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:15:11.493" level="INFO">&amp;{data} = { Name=Test_Group | Description=Test_Group }</msg>
<status status="PASS" endtime="20190619 22:15:11.494" starttime="20190619 22:15:11.493"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_group}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:11.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.525" starttime="20190619 22:15:11.494"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:11.526" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:15:11.526" starttime="20190619 22:15:11.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:11.527" level="INFO">
Response = {u'status': 200, u'path': u'/cluster/add/', u'message': u'', u'Data': {u'Description': u'Test_Group', u'ModifiedAt': 0, u'owner': 1, u'Id': 18, u'CreatedAt': 0, u'Name': u'Test_Group'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:15:11.527" starttime="20190619 22:15:11.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:11.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.528" starttime="20190619 22:15:11.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:11.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:11.529" starttime="20190619 22:15:11.528"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:15:16.529" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:15:16.530" starttime="20190619 22:15:11.529"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_group}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:16.564" level="INFO">Get Request using : alias=platina, uri=/pccserver/cluster/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:15:16.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.564" starttime="20190619 22:15:16.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:16.565" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:15:16.565" starttime="20190619 22:15:16.564"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:16.566" level="INFO">
Response = {u'status': 200, u'path': u'/cluster/', u'message': u'', u'Data': [{u'Description': u'test cases', u'ModifiedAt': 0, u'owner': 1, u'Id': 17, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'Test_Group', u'ModifiedAt': 0, u'owner': 1, u'Id': 18, u'CreatedAt': 0, u'Name': u'Test_Group'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:15:16.566" starttime="20190619 22:15:16.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:16.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.567" starttime="20190619 22:15:16.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:16.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.568" starttime="20190619 22:15:16.567"></status>
</kw>
<kw name="Validate Group" library="Data_Parser">
<doc>Get Expected Group from the group list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${group1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${group_id}</var>
</assign>
<msg timestamp="20190619 22:15:16.568" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:15:16.569" level="INFO">${group_id} = 18</msg>
<status status="PASS" endtime="20190619 22:15:16.569" starttime="20190619 22:15:16.568"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${group1_id}</arg>
<arg>${group_id}</arg>
</arguments>
<msg timestamp="20190619 22:15:16.571" level="INFO">${group1_id} = 18</msg>
<status status="PASS" endtime="20190619 22:15:16.571" starttime="20190619 22:15:16.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Group ${group1_name} ID = ${group1_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:16.572" level="INFO">
Group Test_Group ID = 18</msg>
<status status="PASS" endtime="20190619 22:15:16.572" starttime="20190619 22:15:16.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Group ${group1_name} is not present in Groups list</arg>
</arguments>
<msg timestamp="20190619 22:15:16.573" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.573" starttime="20190619 22:15:16.572"></status>
</kw>
<doc>Node Group Creation</doc>
<tags>
<tag>Node Attributes</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:15:16.573" critical="yes" starttime="20190619 22:15:11.492"></status>
</test>
<test id="s1-t11" name="Pcc-Node-Group-Assignment">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${group2_name}</arg>
<arg>Description=${group2_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:15:16.575" level="INFO">&amp;{data} = { Name=Test_Group_2 | Description=Test_Group_2 }</msg>
<status status="PASS" endtime="20190619 22:15:16.575" starttime="20190619 22:15:16.574"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_group}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:16.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.607" starttime="20190619 22:15:16.575"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:16.608" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:15:16.608" starttime="20190619 22:15:16.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:16.609" level="INFO">
Response = {u'status': 200, u'path': u'/cluster/add/', u'message': u'', u'Data': {u'Description': u'Test_Group_2', u'ModifiedAt': 0, u'owner': 1, u'Id': 19, u'CreatedAt': 0, u'Name': u'Test_Group_2'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:15:16.609" starttime="20190619 22:15:16.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:16.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.609" starttime="20190619 22:15:16.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:16.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:16.610" starttime="20190619 22:15:16.610"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:15:21.611" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:15:21.611" starttime="20190619 22:15:16.610"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_group}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:21.646" level="INFO">Get Request using : alias=platina, uri=/pccserver/cluster/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:15:21.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:21.646" starttime="20190619 22:15:21.612"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:21.647" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:15:21.647" starttime="20190619 22:15:21.646"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:21.648" level="INFO">
Response = {u'status': 200, u'path': u'/cluster/', u'message': u'', u'Data': [{u'Description': u'test cases', u'ModifiedAt': 0, u'owner': 1, u'Id': 17, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'Test_Group', u'ModifiedAt': 0, u'owner': 1, u'Id': 18, u'CreatedAt': 0, u'Name': u'Test_Group'}, {u'Description': u'Test_Group_2', u'ModifiedAt': 0, u'owner': 1, u'Id': 19, u'CreatedAt': 0, u'Name': u'Test_Group_2'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:15:21.648" starttime="20190619 22:15:21.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:21.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:21.649" starttime="20190619 22:15:21.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:21.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:21.650" starttime="20190619 22:15:21.649"></status>
</kw>
<kw name="Validate Group" library="Data_Parser">
<doc>Get Expected Group from the group list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${group2_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${group_id}</var>
</assign>
<msg timestamp="20190619 22:15:21.651" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:15:21.651" level="INFO">${group_id} = 19</msg>
<status status="PASS" endtime="20190619 22:15:21.651" starttime="20190619 22:15:21.650"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${group2_id}</arg>
<arg>${group_id}</arg>
</arguments>
<msg timestamp="20190619 22:15:21.653" level="INFO">${group2_id} = 19</msg>
<status status="PASS" endtime="20190619 22:15:21.653" starttime="20190619 22:15:21.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Group ${group2_name} ID = ${group2_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:21.654" level="INFO">
Group Test_Group_2 ID = 19</msg>
<status status="PASS" endtime="20190619 22:15:21.654" starttime="20190619 22:15:21.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Group ${group2_name} is not present in Groups list</arg>
</arguments>
<msg timestamp="20190619 22:15:21.655" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:21.655" starttime="20190619 22:15:21.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Id=${node1_id}</arg>
<arg>ClusterId=${group2_id}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:15:21.656" level="INFO">&amp;{data} = { Id=26 | ClusterId=19 }</msg>
<status status="PASS" endtime="20190619 22:15:21.656" starttime="20190619 22:15:21.655"></status>
</kw>
<kw name="Put Request" library="Request">
<doc>Send a PUT request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the PUT request to
``data`` a dictionary of key-value pairs that will be urlencoded
   and sent as PUT data
   or binary data that is sent as the raw body content
``json`` a value that will be json encoded
   and sent as PUT data if data is not specified
``headers`` a dictionary of headers to use with the request
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``params`` url parameters to append to the uri
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_group_to_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:15:21.690" level="INFO">Put Request using : alias=platina, uri=/pccserver/node/update/, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True</msg>
<msg timestamp="20190619 22:15:21.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:15:21.690" starttime="20190619 22:15:21.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:21.691" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:15:21.691" starttime="20190619 22:15:21.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:15:21.692" level="INFO">
Response = {u'status': 200, u'path': u'/node/update/', u'message': u'', u'Data': {u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'ModifiedAt': 1561007335468, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': 19, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'roles': None, u'standby': False, u'SN': u'', u'provisionStatus': u'', u'Id': 26}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:15:21.692" starttime="20190619 22:15:21.691"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:15:21.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:15:21.693" starttime="20190619 22:15:21.692"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60s</arg>
</arguments>
<msg timestamp="20190619 22:16:21.694" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20190619 22:16:21.694" starttime="20190619 22:15:21.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:16:21.695" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:16:21.695" starttime="20190619 22:16:21.694"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:21.840" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:16:21.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:21.840" starttime="20190619 22:16:21.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:21.841" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:21.841" starttime="20190619 22:16:21.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:21.842" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'ModifiedAt': 1561007335468, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': 19, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': None, u'standby': False, u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:16:21.842" starttime="20190619 22:16:21.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:21.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:21.843" starttime="20190619 22:16:21.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:21.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:21.844" starttime="20190619 22:16:21.843"></status>
</kw>
<kw name="Validate Node Group" library="Data_Parser">
<doc>validated Assigned Group in node</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node1_name}</arg>
<arg>${group2_id}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node1_id}</var>
</assign>
<msg timestamp="20190619 22:16:21.845" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:16:21.845" level="INFO">${node1_id} = 26</msg>
<status status="PASS" endtime="20190619 22:16:21.845" starttime="20190619 22:16:21.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Node ${node1_name} is not updated with the Group ${group2_name}</arg>
</arguments>
<msg timestamp="20190619 22:16:21.846" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:21.846" starttime="20190619 22:16:21.846"></status>
</kw>
<doc>Node to Group Assignment</doc>
<tags>
<tag>Node Attributes</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:16:21.846" critical="yes" starttime="20190619 22:15:16.573"></status>
</test>
<test id="s1-t12" name="Pcc-Node-Group-Delete">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:16:26.848" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:16:26.848" starttime="20190619 22:16:21.847"></status>
</kw>
<kw name="Delete Request" library="Request">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_group}${group1_id}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:26.896" level="INFO">Delete Request using : alias=platina, uri=/pccserver/cluster/18, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True </msg>
<msg timestamp="20190619 22:16:26.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:26.896" starttime="20190619 22:16:26.848"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:26.897" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:26.897" starttime="20190619 22:16:26.896"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:26.897" level="INFO">
Response = {u'status': 200, u'path': u'/cluster/18', u'message': u'', u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:26.898" starttime="20190619 22:16:26.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:26.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:26.898" starttime="20190619 22:16:26.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:26.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:26.899" starttime="20190619 22:16:26.899"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:16:31.900" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:16:31.900" starttime="20190619 22:16:26.899"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_group}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:31.942" level="INFO">Get Request using : alias=platina, uri=/pccserver/cluster/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:16:31.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.942" starttime="20190619 22:16:31.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:31.943" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:31.943" starttime="20190619 22:16:31.943"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:31.944" level="INFO">
Response = {u'status': 200, u'path': u'/cluster/', u'message': u'', u'Data': [{u'Description': u'test cases', u'ModifiedAt': 0, u'owner': 1, u'Id': 17, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'Test_Group_2', u'ModifiedAt': 0, u'owner': 1, u'Id': 19, u'CreatedAt': 0, u'Name': u'Test_Group_2'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:31.944" starttime="20190619 22:16:31.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:31.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.945" starttime="20190619 22:16:31.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:31.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.946" starttime="20190619 22:16:31.945"></status>
</kw>
<kw name="Validate Group" library="Data_Parser">
<doc>Get Expected Group from the group list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${group1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${group_id}</var>
</assign>
<msg timestamp="20190619 22:16:31.947" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:16:31.947" level="INFO">${group_id} = None</msg>
<status status="PASS" endtime="20190619 22:16:31.947" starttime="20190619 22:16:31.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Group ${group1_name} is not present in Groups list</arg>
</arguments>
<msg timestamp="20190619 22:16:31.948" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.948" starttime="20190619 22:16:31.947"></status>
</kw>
<doc>Node Group Deletion</doc>
<tags>
<tag>Node Attributes</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:16:31.948" critical="yes" starttime="20190619 22:16:21.847"></status>
</test>
<test id="s1-t13" name="Pcc-Node-Role-create">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${role1_name}</arg>
<arg>description=${role1_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:16:31.950" level="INFO">&amp;{data} = { name=test_role | description=test_role }</msg>
<status status="PASS" endtime="20190619 22:16:31.950" starttime="20190619 22:16:31.949"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_role}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:31.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.983" starttime="20190619 22:16:31.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:31.984" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:31.984" starttime="20190619 22:16:31.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:31.985" level="INFO">
Response = {u'status': 200, u'path': u'/roles/', u'message': u'', u'Data': {u'description': u'test_role', u'name': u'test_role', u'templateIDs': None, u'owner': 1, u'id': 16, u'templateNames': None}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:31.985" starttime="20190619 22:16:31.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:31.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.986" starttime="20190619 22:16:31.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:31.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:31.986" starttime="20190619 22:16:31.986"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:16:36.987" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:16:36.987" starttime="20190619 22:16:31.987"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${add_role}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:37.037" level="INFO">Get Request using : alias=platina, uri=/pccserver/roles/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:16:37.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.037" starttime="20190619 22:16:36.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:37.038" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:37.038" starttime="20190619 22:16:37.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:37.039" level="INFO">
Response = {u'status': 200, u'path': u'/roles/', u'message': u'', u'Data': [{u'description': u'Role with Goes 1.2.0, Ethtools and iproute', u'name': u'PLATINA_GOES', u'templateIDs': [7, 4, 6], u'owner': 1, u'id': 1, u'templateNames': None}, {u'description': u'Role with LLDP', u'name': u'LLDP', u'templateIDs': [3], u'owner': 1, u'id': 2, u'templateNames': None}, {u'description': u'Role with FRR', u'name': u'OSPF', u'templateIDs': [8], u'owner': 1, u'id': 3, u'templateNames': None}, {u'description': u'Role with FRR', u'name': u'BGP', u'templateIDs': [8], u'owner': 1, u'id': 4, u'templateNames': None}, {u'description': u'Role with WordPress blog', u'name': u'WordPress', u'templateIDs': [5], u'owner': 1, u'id': 5, u'templateNames': None}, {u'description': u'Bare-metal deployment Role', u'name': u'MaaS', u'templateIDs': [9], u'owner': 1, u'id': 6, u'templateNames': None}, {u'description': u'Read_Only', u'name': u'Read_Only', u'templateIDs': [1], u'owner': 1, u'id': 15, u'templateNames': None}, {u'description': u'test_role', u'name': u'test_role', u'templateIDs': None, u'owner': 1, u'id': 16, u'templateNames': None}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:37.039" starttime="20190619 22:16:37.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:37.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.040" starttime="20190619 22:16:37.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:37.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.041" starttime="20190619 22:16:37.040"></status>
</kw>
<kw name="Validate Roles" library="Data_Parser">
<doc>Get Expected Role from the group list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${role1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${role_id}</var>
</assign>
<msg timestamp="20190619 22:16:37.042" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:16:37.042" level="INFO">${role_id} = 16</msg>
<status status="PASS" endtime="20190619 22:16:37.042" starttime="20190619 22:16:37.041"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${role1_id}</arg>
<arg>${role_id}</arg>
</arguments>
<msg timestamp="20190619 22:16:37.043" level="INFO">${role1_id} = 16</msg>
<status status="PASS" endtime="20190619 22:16:37.043" starttime="20190619 22:16:37.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Roles ${role1_name} ID = ${role1_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:37.044" level="INFO">
Roles test_role ID = 16</msg>
<status status="PASS" endtime="20190619 22:16:37.044" starttime="20190619 22:16:37.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Role ${role1_name} is not present in Roles list</arg>
</arguments>
<msg timestamp="20190619 22:16:37.044" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.045" starttime="20190619 22:16:37.044"></status>
</kw>
<doc>Node Role Creation</doc>
<tags>
<tag>Node Attributes</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:16:37.045" critical="yes" starttime="20190619 22:16:31.948"></status>
</test>
<test id="s1-t14" name="Pcc-Node-Role-Assignment">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${role2_name}</arg>
<arg>description=${role2_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:16:37.046" level="INFO">&amp;{data} = { name=test_role_2 | description=test_role_2 }</msg>
<status status="PASS" endtime="20190619 22:16:37.047" starttime="20190619 22:16:37.046"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_role}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:37.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.131" starttime="20190619 22:16:37.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:37.131" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:37.132" starttime="20190619 22:16:37.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:37.132" level="INFO">
Response = {u'status': 200, u'path': u'/roles/', u'message': u'', u'Data': {u'description': u'test_role_2', u'name': u'test_role_2', u'templateIDs': None, u'owner': 1, u'id': 17, u'templateNames': None}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:37.133" starttime="20190619 22:16:37.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:37.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.133" starttime="20190619 22:16:37.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:37.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:37.134" starttime="20190619 22:16:37.133"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:16:42.135" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:16:42.135" starttime="20190619 22:16:37.134"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${add_role}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:42.174" level="INFO">Get Request using : alias=platina, uri=/pccserver/roles/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:16:42.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:42.175" starttime="20190619 22:16:42.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:42.175" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:42.176" starttime="20190619 22:16:42.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:42.176" level="INFO">
Response = {u'status': 200, u'path': u'/roles/', u'message': u'', u'Data': [{u'description': u'Role with Goes 1.2.0, Ethtools and iproute', u'name': u'PLATINA_GOES', u'templateIDs': [7, 4, 6], u'owner': 1, u'id': 1, u'templateNames': None}, {u'description': u'Role with LLDP', u'name': u'LLDP', u'templateIDs': [3], u'owner': 1, u'id': 2, u'templateNames': None}, {u'description': u'Role with FRR', u'name': u'OSPF', u'templateIDs': [8], u'owner': 1, u'id': 3, u'templateNames': None}, {u'description': u'Role with FRR', u'name': u'BGP', u'templateIDs': [8], u'owner': 1, u'id': 4, u'templateNames': None}, {u'description': u'Role with WordPress blog', u'name': u'WordPress', u'templateIDs': [5], u'owner': 1, u'id': 5, u'templateNames': None}, {u'description': u'Bare-metal deployment Role', u'name': u'MaaS', u'templateIDs': [9], u'owner': 1, u'id': 6, u'templateNames': None}, {u'description': u'Read_Only', u'name': u'Read_Only', u'templateIDs': [1], u'owner': 1, u'id': 15, u'templateNames': None}, {u'description': u'test_role', u'name': u'test_role', u'templateIDs': None, u'owner': 1, u'id': 16, u'templateNames': None}, {u'description': u'test_role_2', u'name': u'test_role_2', u'templateIDs': None, u'owner': 1, u'id': 17, u'templateNames': None}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:42.177" starttime="20190619 22:16:42.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:42.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:42.177" starttime="20190619 22:16:42.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:42.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:42.178" starttime="20190619 22:16:42.178"></status>
</kw>
<kw name="Validate Roles" library="Data_Parser">
<doc>Get Expected Role from the group list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${role2_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${role_id}</var>
</assign>
<msg timestamp="20190619 22:16:42.179" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:16:42.179" level="INFO">${role_id} = 17</msg>
<status status="PASS" endtime="20190619 22:16:42.180" starttime="20190619 22:16:42.178"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${role2_id}</arg>
<arg>${role_id}</arg>
</arguments>
<msg timestamp="20190619 22:16:42.180" level="INFO">${role2_id} = 17</msg>
<status status="PASS" endtime="20190619 22:16:42.180" starttime="20190619 22:16:42.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Roles ${role2_name} ID = ${role2_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:42.181" level="INFO">
Roles test_role_2 ID = 17</msg>
<status status="PASS" endtime="20190619 22:16:42.181" starttime="20190619 22:16:42.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Role ${role2_name} is not present in Roles list</arg>
</arguments>
<msg timestamp="20190619 22:16:42.182" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:42.182" starttime="20190619 22:16:42.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Id=${node1_id}</arg>
<arg>roles=${role2_id}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:16:42.183" level="INFO">&amp;{data} = { Id=26 | roles=17 }</msg>
<status status="PASS" endtime="20190619 22:16:42.183" starttime="20190619 22:16:42.182"></status>
</kw>
<kw name="Put Request" library="Request">
<doc>Send a PUT request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the PUT request to
``data`` a dictionary of key-value pairs that will be urlencoded
   and sent as PUT data
   or binary data that is sent as the raw body content
``json`` a value that will be json encoded
   and sent as PUT data if data is not specified
``headers`` a dictionary of headers to use with the request
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``params`` url parameters to append to the uri
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_group_to_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:16:42.220" level="INFO">Put Request using : alias=platina, uri=/pccserver/node/update/, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True</msg>
<msg timestamp="20190619 22:16:42.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:16:42.221" starttime="20190619 22:16:42.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:42.221" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:16:42.221" starttime="20190619 22:16:42.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:16:42.222" level="INFO">
Response = {u'status': 200, u'path': u'/node/update/', u'message': u'', u'Data': {u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'ModifiedAt': 1561007415995, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'roles': [17], u'standby': False, u'SN': u'', u'provisionStatus': u'', u'Id': 26}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:16:42.222" starttime="20190619 22:16:42.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:16:42.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:16:42.223" starttime="20190619 22:16:42.222"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60s</arg>
</arguments>
<msg timestamp="20190619 22:17:42.224" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20190619 22:17:42.224" starttime="20190619 22:16:42.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:17:42.225" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:17:42.225" starttime="20190619 22:17:42.224"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:42.362" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:17:42.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.362" starttime="20190619 22:17:42.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:42.363" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:42.363" starttime="20190619 22:17:42.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:42.364" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'ModifiedAt': 1561007415995, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': [17], u'standby': False, u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:17:42.365" starttime="20190619 22:17:42.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:42.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.365" starttime="20190619 22:17:42.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:42.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.366" starttime="20190619 22:17:42.366"></status>
</kw>
<kw name="Validate Node Roles" library="Data_Parser">
<doc>validated Assigned Roles in node</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node1_name}</arg>
<arg>${role2_id}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node1_id}</var>
</assign>
<msg timestamp="20190619 22:17:42.368" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:17:42.368" level="INFO">${node1_id} = 26</msg>
<status status="PASS" endtime="20190619 22:17:42.368" starttime="20190619 22:17:42.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Node ${node1_name} is not updated with the Roles ${role2_name}</arg>
</arguments>
<msg timestamp="20190619 22:17:42.369" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.369" starttime="20190619 22:17:42.368"></status>
</kw>
<doc>Node Role Assignment</doc>
<tags>
<tag>Node Attributes</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:17:42.369" critical="yes" starttime="20190619 22:16:37.045"></status>
</test>
<test id="s1-t15" name="Pcc-Node-Role-Delete">
<kw name="Delete Request" library="Request">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${add_role}${role1_id}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:42.413" level="INFO">Delete Request using : alias=platina, uri=/pccserver/roles/16, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True </msg>
<msg timestamp="20190619 22:17:42.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.413" starttime="20190619 22:17:42.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:42.414" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:42.414" starttime="20190619 22:17:42.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:42.415" level="INFO">
Response = {u'status': 200, u'path': u'/roles/16', u'message': u'', u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:42.415" starttime="20190619 22:17:42.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:42.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.416" starttime="20190619 22:17:42.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:42.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:42.416" starttime="20190619 22:17:42.416"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:17:47.417" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:17:47.417" starttime="20190619 22:17:42.417"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${add_role}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:47.457" level="INFO">Get Request using : alias=platina, uri=/pccserver/roles/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:17:47.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:47.457" starttime="20190619 22:17:47.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:47.458" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:47.458" starttime="20190619 22:17:47.457"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:47.459" level="INFO">
Response = {u'status': 200, u'path': u'/roles/', u'message': u'', u'Data': [{u'description': u'Role with Goes 1.2.0, Ethtools and iproute', u'name': u'PLATINA_GOES', u'templateIDs': [7, 4, 6], u'owner': 1, u'id': 1, u'templateNames': None}, {u'description': u'Role with LLDP', u'name': u'LLDP', u'templateIDs': [3], u'owner': 1, u'id': 2, u'templateNames': None}, {u'description': u'Role with FRR', u'name': u'OSPF', u'templateIDs': [8], u'owner': 1, u'id': 3, u'templateNames': None}, {u'description': u'Role with FRR', u'name': u'BGP', u'templateIDs': [8], u'owner': 1, u'id': 4, u'templateNames': None}, {u'description': u'Role with WordPress blog', u'name': u'WordPress', u'templateIDs': [5], u'owner': 1, u'id': 5, u'templateNames': None}, {u'description': u'Bare-metal deployment Role', u'name': u'MaaS', u'templateIDs': [9], u'owner': 1, u'id': 6, u'templateNames': None}, {u'description': u'Read_Only', u'name': u'Read_Only', u'templateIDs': [1], u'owner': 1, u'id': 15, u'templateNames': None}, {u'description': u'test_role_2', u'name': u'test_role_2', u'templateIDs': None, u'owner': 1, u'id': 17, u'templateNames': None}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:47.459" starttime="20190619 22:17:47.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:47.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:47.460" starttime="20190619 22:17:47.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:47.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:47.461" starttime="20190619 22:17:47.460"></status>
</kw>
<kw name="Validate Roles" library="Data_Parser">
<doc>Get Expected Role from the group list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${role1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${role_id}</var>
</assign>
<msg timestamp="20190619 22:17:47.462" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:17:47.462" level="INFO">${role_id} = None</msg>
<status status="PASS" endtime="20190619 22:17:47.462" starttime="20190619 22:17:47.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Role ${role1_name} is not present in Roles list</arg>
</arguments>
<msg timestamp="20190619 22:17:47.463" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:47.463" starttime="20190619 22:17:47.462"></status>
</kw>
<doc>Node Role Deletion</doc>
<tags>
<tag>Node Attributes</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:17:47.463" critical="yes" starttime="20190619 22:17:42.369"></status>
</test>
<test id="s1-t16" name="Pcc-sites-add-site">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site1_name}</arg>
<arg>Description=${site1_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:17:47.465" level="INFO">&amp;{data} = { Name=test_site1 | Description=test_site1 }</msg>
<status status="PASS" endtime="20190619 22:17:47.465" starttime="20190619 22:17:47.464"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:47.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:47.497" starttime="20190619 22:17:47.465"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:47.498" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:47.498" starttime="20190619 22:17:47.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:47.499" level="INFO">
Response = {u'status': 200, u'path': u'/site/add/', u'message': u'', u'Data': {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:47.499" starttime="20190619 22:17:47.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:47.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:47.500" starttime="20190619 22:17:47.499"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:17:52.500" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:17:52.501" starttime="20190619 22:17:47.500"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:52.536" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:17:52.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.536" starttime="20190619 22:17:52.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.537" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:52.537" starttime="20190619 22:17:52.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.538" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:52.538" starttime="20190619 22:17:52.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:52.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.539" starttime="20190619 22:17:52.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:52.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.540" starttime="20190619 22:17:52.539"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:17:52.541" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:17:52.541" level="INFO">${site_id} = 24</msg>
<status status="PASS" endtime="20190619 22:17:52.541" starttime="20190619 22:17:52.540"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${site1_id}</arg>
<arg>${site_id}</arg>
</arguments>
<msg timestamp="20190619 22:17:52.544" level="INFO">${site1_id} = 24</msg>
<status status="PASS" endtime="20190619 22:17:52.544" starttime="20190619 22:17:52.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Site ${site1_name} ID = ${site1_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.545" level="INFO">
Site test_site1 ID = 24</msg>
<status status="PASS" endtime="20190619 22:17:52.545" starttime="20190619 22:17:52.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Site ${site1_name} is not present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:17:52.545" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.545" starttime="20190619 22:17:52.545"></status>
</kw>
<doc>Add Site in the PCC</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:17:52.546" critical="yes" starttime="20190619 22:17:47.463"></status>
</test>
<test id="s1-t17" name="Pcc-sites-add-site-without-name">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Description=${site5_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:17:52.547" level="INFO">&amp;{data} = { Description=test_site5 }</msg>
<status status="PASS" endtime="20190619 22:17:52.548" starttime="20190619 22:17:52.547"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:52.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.584" starttime="20190619 22:17:52.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.584" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:52.584" starttime="20190619 22:17:52.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.585" level="INFO">
Response = {u'status': 200, u'path': u'/site/add/', u'message': u'', u'Data': {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:52.585" starttime="20190619 22:17:52.585"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<arg>msg=Site Created without site name and with description only</arg>
</arguments>
<msg timestamp="20190619 22:17:52.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190619 22:17:52.586" level="FAIL">Site Created without site name and with description only: 200 == 200</msg>
<status status="FAIL" endtime="20190619 22:17:52.586" starttime="20190619 22:17:52.585"></status>
</kw>
<doc>Add Site in the PCC without adding required name</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="FAIL" endtime="20190619 22:17:52.586" critical="yes" starttime="20190619 22:17:52.546">Site Created without site name and with description only: 200 == 200</status>
</test>
<test id="s1-t18" name="Pcc-sites-delete-multiple-site">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site6_name}</arg>
<arg>Description=${site6_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:17:52.588" level="INFO">&amp;{data} = { Name=test_site6 | Description=test_site6 }</msg>
<status status="PASS" endtime="20190619 22:17:52.588" starttime="20190619 22:17:52.588"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:52.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.668" starttime="20190619 22:17:52.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.669" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:52.669" starttime="20190619 22:17:52.668"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:52.670" level="INFO">
Response = {u'status': 200, u'path': u'/site/add/', u'message': u'', u'Data': {u'Description': u'test_site6', u'ModifiedAt': 0, u'Id': 26, u'CreatedAt': 0, u'Name': u'test_site6'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:52.670" starttime="20190619 22:17:52.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:52.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:52.671" starttime="20190619 22:17:52.670"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:17:57.671" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:17:57.672" starttime="20190619 22:17:52.671"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:57.708" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:17:57.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:57.708" starttime="20190619 22:17:57.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:57.709" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:57.709" starttime="20190619 22:17:57.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:57.711" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'test_site6', u'ModifiedAt': 0, u'Id': 26, u'CreatedAt': 0, u'Name': u'test_site6'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:57.711" starttime="20190619 22:17:57.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:57.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:57.712" starttime="20190619 22:17:57.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:57.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:57.713" starttime="20190619 22:17:57.712"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site6_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:17:57.714" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:17:57.714" level="INFO">${site_id} = 26</msg>
<status status="PASS" endtime="20190619 22:17:57.714" starttime="20190619 22:17:57.713"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${site6_id}</arg>
<arg>${site_id}</arg>
</arguments>
<msg timestamp="20190619 22:17:57.716" level="INFO">${site6_id} = 26</msg>
<status status="PASS" endtime="20190619 22:17:57.716" starttime="20190619 22:17:57.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Site ${site1_name} ID = ${site6_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:57.717" level="INFO">
Site test_site1 ID = 26</msg>
<status status="PASS" endtime="20190619 22:17:57.717" starttime="20190619 22:17:57.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site7_name}</arg>
<arg>Description=${site7_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:17:57.718" level="INFO">&amp;{data} = { Name=test_site7 | Description=test_site7 }</msg>
<status status="PASS" endtime="20190619 22:17:57.718" starttime="20190619 22:17:57.717"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:17:57.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:17:57.754" starttime="20190619 22:17:57.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:57.755" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:17:57.755" starttime="20190619 22:17:57.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:17:57.756" level="INFO">
Response = {u'status': 200, u'path': u'/site/add/', u'message': u'', u'Data': {u'Description': u'test_site7', u'ModifiedAt': 0, u'Id': 27, u'CreatedAt': 0, u'Name': u'test_site7'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:17:57.756" starttime="20190619 22:17:57.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:17:57.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:17:57.757" starttime="20190619 22:17:57.756"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:18:02.758" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:18:02.758" starttime="20190619 22:17:57.757"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:18:02.795" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:18:02.795" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:18:02.795" starttime="20190619 22:18:02.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:02.796" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:18:02.796" starttime="20190619 22:18:02.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:02.797" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'test_site6', u'ModifiedAt': 0, u'Id': 26, u'CreatedAt': 0, u'Name': u'test_site6'}, {u'Description': u'test_site7', u'ModifiedAt': 0, u'Id': 27, u'CreatedAt': 0, u'Name': u'test_site7'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:18:02.797" starttime="20190619 22:18:02.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:02.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:02.798" starttime="20190619 22:18:02.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:02.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:02.799" starttime="20190619 22:18:02.798"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site7_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:18:02.800" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:18:02.800" level="INFO">${site_id} = 27</msg>
<status status="PASS" endtime="20190619 22:18:02.800" starttime="20190619 22:18:02.799"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${site7_id}</arg>
<arg>${site_id}</arg>
</arguments>
<msg timestamp="20190619 22:18:02.802" level="INFO">${site7_id} = 27</msg>
<status status="PASS" endtime="20190619 22:18:02.802" starttime="20190619 22:18:02.800"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Site ${site1_name} ID = ${site7_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:02.803" level="INFO">
Site test_site1 ID = 27</msg>
<status status="PASS" endtime="20190619 22:18:02.803" starttime="20190619 22:18:02.803"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${site6_id}</arg>
<arg>${site7_id}</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20190619 22:18:02.804" level="INFO">@{data} = [ 26 | 27 ]</msg>
<status status="PASS" endtime="20190619 22:18:02.804" starttime="20190619 22:18:02.803"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${delete_site}</arg>
<arg>headers=${headers}</arg>
<arg>json=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:18:02.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:18:02.837" starttime="20190619 22:18:02.804"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:02.838" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:18:02.838" starttime="20190619 22:18:02.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:02.839" level="INFO">
Response = {u'status': 200, u'path': u'/site/delete/', u'message': u'', u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:18:02.839" starttime="20190619 22:18:02.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:02.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:02.840" starttime="20190619 22:18:02.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:02.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:02.841" starttime="20190619 22:18:02.840"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:18:07.841" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:18:07.841" starttime="20190619 22:18:02.841"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:18:07.878" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:18:07.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.878" starttime="20190619 22:18:07.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:07.879" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:18:07.879" starttime="20190619 22:18:07.879"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:07.880" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:18:07.880" starttime="20190619 22:18:07.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:07.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.881" starttime="20190619 22:18:07.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:07.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.882" starttime="20190619 22:18:07.881"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site6_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:18:07.883" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:18:07.883" level="INFO">${site_id} = None</msg>
<status status="PASS" endtime="20190619 22:18:07.883" starttime="20190619 22:18:07.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Deleted Site ${site6_name} is present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:18:07.884" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.884" starttime="20190619 22:18:07.883"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site7_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:18:07.885" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:18:07.885" level="INFO">${site_id} = None</msg>
<status status="PASS" endtime="20190619 22:18:07.885" starttime="20190619 22:18:07.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Deleted Site ${site7_name} is present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:18:07.885" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.886" starttime="20190619 22:18:07.885"></status>
</kw>
<doc>Delete Multiple Sites</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:18:07.886" critical="yes" starttime="20190619 22:17:52.587"></status>
</test>
<test id="s1-t19" name="Pcc-Node-Site-Assignment">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Id=${node1_id}</arg>
<arg>Site_Id=${site1_id}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:18:07.887" level="INFO">&amp;{data} = { Id=26 | Site_Id=24 }</msg>
<status status="PASS" endtime="20190619 22:18:07.888" starttime="20190619 22:18:07.887"></status>
</kw>
<kw name="Put Request" library="Request">
<doc>Send a PUT request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the PUT request to
``data`` a dictionary of key-value pairs that will be urlencoded
   and sent as PUT data
   or binary data that is sent as the raw body content
``json`` a value that will be json encoded
   and sent as PUT data if data is not specified
``headers`` a dictionary of headers to use with the request
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``params`` url parameters to append to the uri
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site_to_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:18:07.925" level="INFO">Put Request using : alias=platina, uri=/pccserver/node/update/, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True</msg>
<msg timestamp="20190619 22:18:07.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.925" starttime="20190619 22:18:07.888"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:07.926" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:18:07.926" starttime="20190619 22:18:07.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:18:07.927" level="INFO">
Response = {u'status': 200, u'path': u'/node/update/', u'message': u'', u'Data': {u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'ModifiedAt': 1561007501697, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': 24, u'NodeAuditId': 0, u'Model': u'', u'roles': None, u'standby': False, u'SN': u'', u'provisionStatus': u'', u'Id': 26}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:18:07.927" starttime="20190619 22:18:07.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:18:07.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:18:07.927" starttime="20190619 22:18:07.927"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60s</arg>
</arguments>
<msg timestamp="20190619 22:19:07.928" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20190619 22:19:07.928" starttime="20190619 22:18:07.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:07.930" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:19:07.930" starttime="20190619 22:19:07.929"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:08.067" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:08.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:08.067" starttime="20190619 22:19:07.930"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:08.068" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:08.068" starttime="20190619 22:19:08.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:08.069" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'ModifiedAt': 1561007501697, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': 24, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': [17], u'standby': False, u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:19:08.070" starttime="20190619 22:19:08.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:08.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:08.070" starttime="20190619 22:19:08.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:08.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:08.071" starttime="20190619 22:19:08.071"></status>
</kw>
<kw name="Validate Node Site" library="Data_Parser">
<doc>validated updated site in node</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node1_name}</arg>
<arg>${site1_id}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node1_id}</var>
</assign>
<msg timestamp="20190619 22:19:08.072" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:08.072" level="INFO">${node1_id} = 26</msg>
<status status="PASS" endtime="20190619 22:19:08.073" starttime="20190619 22:19:08.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Node ${node1_name} is not updated with the site ${site1_name}</arg>
</arguments>
<msg timestamp="20190619 22:19:08.073" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:08.073" starttime="20190619 22:19:08.073"></status>
</kw>
<doc>Assign a particular site to a Node</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:08.074" critical="yes" starttime="20190619 22:18:07.886"></status>
</test>
<test id="s1-t20" name="PCC-Node-Tenant-Assignment">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${tenant1_name}</arg>
<arg>description=${tenant1_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:08.075" level="INFO">&amp;{data} = { name=test01_tenant | description=test01_tenant }</msg>
<status status="PASS" endtime="20190619 22:19:08.075" starttime="20190619 22:19:08.075"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_tenant}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:08.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:08.115" starttime="20190619 22:19:08.076"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:08.116" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:08.116" starttime="20190619 22:19:08.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:08.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:08.117" starttime="20190619 22:19:08.116"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190619 22:19:18.118" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190619 22:19:18.118" starttime="20190619 22:19:08.117"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${tenant_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:18.181" level="INFO">Get Request using : alias=platina, uri=/user-management/tenant/list/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:18.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:18.182" starttime="20190619 22:19:18.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:18.182" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:18.183" starttime="20190619 22:19:18.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:18.183" level="INFO">
Response = [{u'description': u'the root tenant', u'parent': None, u'entityIDs': [1, 2, 3, 4, 5, 6, 7], u'children': [36], u'entityNames': [u'security', u'pccserver', u'user-management', u'maas', u'key-manager', u'monitor', u'mailer'], u'owner': 1, u'nodes': [], u'id': 1, u'name': u'ROOT'}, {u'description': u'test01_tenant', u'parent': 1, u'id': 36, u'owner': 36, u'nodes': [], u'children': [], u'name': u'test01_tenant'}]</msg>
<status status="PASS" endtime="20190619 22:19:18.184" starttime="20190619 22:19:18.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:18.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:18.184" starttime="20190619 22:19:18.184"></status>
</kw>
<kw name="Get Tenant Id" library="Data_Parser">
<doc>get tenant id from tenant list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${tenant1_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${tenant1_id}</var>
</assign>
<msg timestamp="20190619 22:19:18.185" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:18.185" level="INFO">${tenant1_id} = 36</msg>
<status status="PASS" endtime="20190619 22:19:18.185" starttime="20190619 22:19:18.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n tenant ID = ${tenant1_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:18.186" level="INFO">
tenant ID = 36</msg>
<status status="PASS" endtime="20190619 22:19:18.186" starttime="20190619 22:19:18.185"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${node1_id}</arg>
</arguments>
<assign>
<var>@{node_id_list}</var>
</assign>
<msg timestamp="20190619 22:19:18.187" level="INFO">@{node_id_list} = [ 26 ]</msg>
<status status="PASS" endtime="20190619 22:19:18.187" starttime="20190619 22:19:18.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>tenant=${tenant1_id}</arg>
<arg>ids=@{node_id_list}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:18.188" level="INFO">&amp;{data} = { tenant=36 | ids=['26'] }</msg>
<status status="PASS" endtime="20190619 22:19:18.188" starttime="20190619 22:19:18.187"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${node_tenant_assignment}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:18.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:18.271" starttime="20190619 22:19:18.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:18.272" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:18.272" starttime="20190619 22:19:18.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:18.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:18.273" starttime="20190619 22:19:18.272"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190619 22:19:28.274" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190619 22:19:28.274" starttime="20190619 22:19:18.273"></status>
</kw>
<doc>Assign a particular Node to a Tenant.</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:28.274" critical="yes" starttime="20190619 22:19:08.074"></status>
</test>
<test id="s1-t21" name="Pcc-sites-add-site-without-description">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site2_name}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:28.276" level="INFO">&amp;{data} = { Name=test_site2 }</msg>
<status status="PASS" endtime="20190619 22:19:28.276" starttime="20190619 22:19:28.275"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:28.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:28.337" starttime="20190619 22:19:28.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:28.338" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:28.338" starttime="20190619 22:19:28.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:28.339" level="INFO">
Response = {u'status': 200, u'path': u'/site/add/', u'message': u'', u'Data': {u'Description': u'', u'ModifiedAt': 0, u'Id': 28, u'CreatedAt': 0, u'Name': u'test_site2'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:28.339" starttime="20190619 22:19:28.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:28.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:28.340" starttime="20190619 22:19:28.339"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:19:33.341" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:19:33.341" starttime="20190619 22:19:28.340"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:33.383" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:33.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:33.383" starttime="20190619 22:19:33.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:33.384" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:33.384" starttime="20190619 22:19:33.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:33.385" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'', u'ModifiedAt': 0, u'Id': 28, u'CreatedAt': 0, u'Name': u'test_site2'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:33.385" starttime="20190619 22:19:33.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:33.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:33.386" starttime="20190619 22:19:33.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:33.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:33.387" starttime="20190619 22:19:33.386"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site2_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:19:33.388" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:33.388" level="INFO">${site_id} = 28</msg>
<status status="PASS" endtime="20190619 22:19:33.388" starttime="20190619 22:19:33.387"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${site2_id}</arg>
<arg>${site_id}</arg>
</arguments>
<msg timestamp="20190619 22:19:33.390" level="INFO">${site2_id} = 28</msg>
<status status="PASS" endtime="20190619 22:19:33.390" starttime="20190619 22:19:33.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Site ${site2_name} ID = ${site2_id}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:33.391" level="INFO">
Site test_site2 ID = 28</msg>
<status status="PASS" endtime="20190619 22:19:33.391" starttime="20190619 22:19:33.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Site ${site2_name} is not present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:19:33.392" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:33.392" starttime="20190619 22:19:33.391"></status>
</kw>
<doc>Add Site in the PCC without description</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:33.392" critical="yes" starttime="20190619 22:19:28.275"></status>
</test>
<test id="s1-t22" name="Pcc-sites-add-site-with-invalid-name">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site3_name}</arg>
<arg>Description=${site3_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:33.394" level="INFO">&amp;{data} = { Name=@#%$@ | Description=@#%$@ }</msg>
<status status="PASS" endtime="20190619 22:19:33.394" starttime="20190619 22:19:33.393"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_site}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:33.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:33.432" starttime="20190619 22:19:33.394"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:33.433" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:33.433" starttime="20190619 22:19:33.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:33.433" level="INFO">
Response = {u'status': 200, u'path': u'/site/add/', u'message': u'', u'Data': {u'Description': u'@#%$@', u'ModifiedAt': 0, u'Id': 29, u'CreatedAt': 0, u'Name': u'@#%$@'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:33.433" starttime="20190619 22:19:33.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:33.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:33.434" starttime="20190619 22:19:33.434"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:19:38.435" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:19:38.435" starttime="20190619 22:19:33.434"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:38.478" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:38.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:38.478" starttime="20190619 22:19:38.436"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:38.479" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:38.479" starttime="20190619 22:19:38.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:38.480" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'test_site1'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'', u'ModifiedAt': 0, u'Id': 28, u'CreatedAt': 0, u'Name': u'test_site2'}, {u'Description': u'@#%$@', u'ModifiedAt': 0, u'Id': 29, u'CreatedAt': 0, u'Name': u'@#%$@'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:38.480" starttime="20190619 22:19:38.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:38.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:38.481" starttime="20190619 22:19:38.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:38.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:38.481" starttime="20190619 22:19:38.481"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site3_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:19:38.482" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:38.483" level="INFO">${site_id} = 29</msg>
<status status="PASS" endtime="20190619 22:19:38.483" starttime="20190619 22:19:38.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Site ${site3_name} is present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:19:38.483" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190619 22:19:38.483" level="FAIL">Site @#%$@ is present in Site list: True != False</msg>
<status status="FAIL" endtime="20190619 22:19:38.484" starttime="20190619 22:19:38.483"></status>
</kw>
<doc>Add Site in the PCC with invalid name</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="FAIL" endtime="20190619 22:19:38.484" critical="yes" starttime="20190619 22:19:33.392">Site @#%$@ is present in Site list: True != False</status>
</test>
<test id="s1-t23" name="Pcc-sites-edit-site-name">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site4_name}</arg>
<arg>Description=${site1_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:38.486" level="INFO">&amp;{data} = { Name=updated_site | Description=test_site1 }</msg>
<status status="PASS" endtime="20190619 22:19:38.486" starttime="20190619 22:19:38.485"></status>
</kw>
<kw name="Put Request" library="Request">
<doc>Send a PUT request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the PUT request to
``data`` a dictionary of key-value pairs that will be urlencoded
   and sent as PUT data
   or binary data that is sent as the raw body content
``json`` a value that will be json encoded
   and sent as PUT data if data is not specified
``headers`` a dictionary of headers to use with the request
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``params`` url parameters to append to the uri
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}${site1_id}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:38.529" level="INFO">Put Request using : alias=platina, uri=/pccserver/site/24, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True</msg>
<msg timestamp="20190619 22:19:38.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:38.529" starttime="20190619 22:19:38.486"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:38.529" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:38.530" starttime="20190619 22:19:38.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:38.530" level="INFO">
Response = {u'status': 200, u'path': u'/site/24', u'message': u'', u'Data': {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 0, u'CreatedAt': 0, u'Name': u'updated_site'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:38.531" starttime="20190619 22:19:38.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:38.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:38.531" starttime="20190619 22:19:38.531"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:19:43.532" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:19:43.532" starttime="20190619 22:19:38.532"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:43.576" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:43.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.577" starttime="20190619 22:19:43.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:43.577" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:43.578" starttime="20190619 22:19:43.577"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:43.578" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'', u'ModifiedAt': 0, u'Id': 28, u'CreatedAt': 0, u'Name': u'test_site2'}, {u'Description': u'@#%$@', u'ModifiedAt': 0, u'Id': 29, u'CreatedAt': 0, u'Name': u'@#%$@'}, {u'Description': u'test_site1', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'updated_site'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:43.578" starttime="20190619 22:19:43.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:43.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.579" starttime="20190619 22:19:43.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:43.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.580" starttime="20190619 22:19:43.579"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site4_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:19:43.581" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:43.581" level="INFO">${site_id} = 24</msg>
<status status="PASS" endtime="20190619 22:19:43.581" starttime="20190619 22:19:43.580"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${site4_id}</arg>
<arg>${site_id}</arg>
</arguments>
<msg timestamp="20190619 22:19:43.584" level="INFO">${site4_id} = 24</msg>
<status status="PASS" endtime="20190619 22:19:43.584" starttime="20190619 22:19:43.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Site name updated_site is present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:19:43.584" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.584" starttime="20190619 22:19:43.584"></status>
</kw>
<doc>Edit Site Name in the PCC</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:43.585" critical="yes" starttime="20190619 22:19:38.484"></status>
</test>
<test id="s1-t24" name="Pcc-sites-edit-site">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:43.586" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:19:43.586" starttime="20190619 22:19:43.586"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:43.719" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:43.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.719" starttime="20190619 22:19:43.587"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:43.720" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:43.720" starttime="20190619 22:19:43.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:43.721" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 36, u'ModifiedAt': 1561007501697, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'Name': u'i30', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': 24, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': [17], u'standby': False, u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:19:43.721" starttime="20190619 22:19:43.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:43.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.722" starttime="20190619 22:19:43.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:43.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.723" starttime="20190619 22:19:43.722"></status>
</kw>
<kw name="Validate Node Site" library="Data_Parser">
<doc>validated updated site in node</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node1_name}</arg>
<arg>${site4_id}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node1_id}</var>
</assign>
<msg timestamp="20190619 22:19:43.724" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:43.724" level="INFO">${node1_id} = 26</msg>
<status status="PASS" endtime="20190619 22:19:43.725" starttime="20190619 22:19:43.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Node ${node1_name} is not updated with the site ${site1_name}</arg>
</arguments>
<msg timestamp="20190619 22:19:43.725" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.725" starttime="20190619 22:19:43.725"></status>
</kw>
<doc>Edit Site information in the PCC when site is associated with the Group</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:43.726" critical="yes" starttime="20190619 22:19:43.585"></status>
</test>
<test id="s1-t25" name="Pcc-sites-edit-site-description">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Name=${site4_name}</arg>
<arg>Description=${site4_desc}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:43.727" level="INFO">&amp;{data} = { Name=updated_site | Description=updated_site }</msg>
<status status="PASS" endtime="20190619 22:19:43.727" starttime="20190619 22:19:43.727"></status>
</kw>
<kw name="Put Request" library="Request">
<doc>Send a PUT request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the PUT request to
``data`` a dictionary of key-value pairs that will be urlencoded
   and sent as PUT data
   or binary data that is sent as the raw body content
``json`` a value that will be json encoded
   and sent as PUT data if data is not specified
``headers`` a dictionary of headers to use with the request
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``params`` url parameters to append to the uri
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}${site1_id}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:43.771" level="INFO">Put Request using : alias=platina, uri=/pccserver/site/24, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True</msg>
<msg timestamp="20190619 22:19:43.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.771" starttime="20190619 22:19:43.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:43.772" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:43.772" starttime="20190619 22:19:43.771"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:43.773" level="INFO">
Response = {u'status': 200, u'path': u'/site/24', u'message': u'', u'Data': {u'Description': u'updated_site', u'ModifiedAt': 0, u'Id': 0, u'CreatedAt': 0, u'Name': u'updated_site'}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:43.773" starttime="20190619 22:19:43.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:43.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:43.773" starttime="20190619 22:19:43.773"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:19:48.774" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:19:48.775" starttime="20190619 22:19:43.774"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:48.819" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:48.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.820" starttime="20190619 22:19:48.775"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:48.820" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:48.821" starttime="20190619 22:19:48.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:48.821" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'', u'ModifiedAt': 0, u'Id': 28, u'CreatedAt': 0, u'Name': u'test_site2'}, {u'Description': u'@#%$@', u'ModifiedAt': 0, u'Id': 29, u'CreatedAt': 0, u'Name': u'@#%$@'}, {u'Description': u'updated_site', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'updated_site'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:48.821" starttime="20190619 22:19:48.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:48.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.822" starttime="20190619 22:19:48.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:48.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.823" starttime="20190619 22:19:48.823"></status>
</kw>
<kw name="Validate Sites Desc" library="Data_Parser">
<doc>Get Expected Site Description from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site4_desc}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:19:48.824" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:19:48.824" level="INFO">${site_id} = 24</msg>
<status status="PASS" endtime="20190619 22:19:48.824" starttime="20190619 22:19:48.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=Site name updated_site is present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:19:48.825" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.825" starttime="20190619 22:19:48.825"></status>
</kw>
<doc>Edit Site Description in the PCC</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:48.825" critical="yes" starttime="20190619 22:19:43.726"></status>
</test>
<test id="s1-t26" name="Pcc-sites-delete-site">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${site2_id}</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20190619 22:19:48.827" level="INFO">@{data} = [ 28 ]</msg>
<status status="PASS" endtime="20190619 22:19:48.827" starttime="20190619 22:19:48.826"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${delete_site}</arg>
<arg>headers=${headers}</arg>
<arg>json=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:48.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.867" starttime="20190619 22:19:48.827"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:48.868" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:48.868" starttime="20190619 22:19:48.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:48.869" level="INFO">
Response = {u'status': 200, u'path': u'/site/delete/', u'message': u'', u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:48.869" starttime="20190619 22:19:48.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:48.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.869" starttime="20190619 22:19:48.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:48.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:48.870" starttime="20190619 22:19:48.870"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190619 22:19:53.871" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20190619 22:19:53.871" starttime="20190619 22:19:48.870"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_site}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:53.915" level="INFO">Get Request using : alias=platina, uri=/pccserver/site/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:19:53.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.916" starttime="20190619 22:19:53.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:53.916" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:53.916" starttime="20190619 22:19:53.916"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:53.917" level="INFO">
Response = {u'status': 200, u'path': u'/site/', u'message': u'', u'Data': [{u'Description': u'test', u'ModifiedAt': 0, u'Id': 4, u'CreatedAt': 0, u'Name': u'test'}, {u'Description': u'test_site5', u'ModifiedAt': 0, u'Id': 25, u'CreatedAt': 0, u'Name': u''}, {u'Description': u'@#%$@', u'ModifiedAt': 0, u'Id': 29, u'CreatedAt': 0, u'Name': u'@#%$@'}, {u'Description': u'updated_site', u'ModifiedAt': 0, u'Id': 24, u'CreatedAt': 0, u'Name': u'updated_site'}], u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:53.917" starttime="20190619 22:19:53.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:53.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.918" starttime="20190619 22:19:53.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:53.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.919" starttime="20190619 22:19:53.919"></status>
</kw>
<kw name="Validate Sites" library="Data_Parser">
<doc>Get Expected Site from the site list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${site2_name}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${site_id}</var>
</assign>
<msg timestamp="20190619 22:19:53.920" level="INFO">${status} = False</msg>
<msg timestamp="20190619 22:19:53.920" level="INFO">${site_id} = None</msg>
<status status="PASS" endtime="20190619 22:19:53.920" starttime="20190619 22:19:53.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>False</arg>
<arg>msg=Deleted Site ${site2_name} is present in Site list</arg>
</arguments>
<msg timestamp="20190619 22:19:53.921" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.921" starttime="20190619 22:19:53.921"></status>
</kw>
<doc>Delete Single Site</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:53.921" critical="yes" starttime="20190619 22:19:48.825"></status>
</test>
<test id="s1-t27" name="Pcc-sites-delete-site-associated-with-node">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${site4_id}</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20190619 22:19:53.923" level="INFO">@{data} = [ 24 ]</msg>
<status status="PASS" endtime="20190619 22:19:53.923" starttime="20190619 22:19:53.922"></status>
</kw>
<kw name="Post Request" library="Request">
<doc>Send a POST request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the POST request to
``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined
``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified
``params`` url parameters to append to the uri
``headers`` a dictionary of headers to use with the request
``files`` a dictionary of file names containing file data to POST to the server
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${delete_site}</arg>
<arg>headers=${headers}</arg>
<arg>json=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:53.961" level="INFO">${resp} = &lt;Response [535]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.961" starttime="20190619 22:19:53.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:53.962" level="INFO">
Status code = 535</msg>
<status status="PASS" endtime="20190619 22:19:53.962" starttime="20190619 22:19:53.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:53.963" level="INFO">
Response = {u'status': 535, u'path': u'/site/delete/', u'message': u'database error', u'error': u'pq: update or delete on table "sites" violates foreign key constraint "nodes_site_id_fkey" on table "nodes"'}</msg>
<status status="PASS" endtime="20190619 22:19:53.963" starttime="20190619 22:19:53.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>535</arg>
</arguments>
<msg timestamp="20190619 22:19:53.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.964" starttime="20190619 22:19:53.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>535</arg>
</arguments>
<msg timestamp="20190619 22:19:53.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:53.965" starttime="20190619 22:19:53.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp.json()['error']}</arg>
<arg>${delete_site_err}</arg>
</arguments>
<status status="PASS" endtime="20190619 22:19:53.965" starttime="20190619 22:19:53.965"></status>
</kw>
<doc>Delete Site in the PCC when site is associated with the Group</doc>
<tags>
<tag>regression_test</tag>
<tag>Sites</tag>
</tags>
<status status="PASS" endtime="20190619 22:19:53.965" critical="yes" starttime="20190619 22:19:53.922"></status>
</test>
<test id="s1-t28" name="Pcc-Node-Advance-Setting">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Id=${node1_id}</arg>
<arg>Name=${node5_name}</arg>
<arg>Host=${node5_host_addr}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:19:53.967" level="INFO">&amp;{data} = { Id=26 | Name=i99 | Host=172.17.4.29 }</msg>
<status status="PASS" endtime="20190619 22:19:53.967" starttime="20190619 22:19:53.966"></status>
</kw>
<kw name="Put Request" library="Request">
<doc>Send a PUT request on the session object found using the
given `alias`
``alias`` that will be used to identify the Session object in the cache
``uri`` to send the PUT request to
``data`` a dictionary of key-value pairs that will be urlencoded
   and sent as PUT data
   or binary data that is sent as the raw body content
``json`` a value that will be json encoded
   and sent as PUT data if data is not specified
``headers`` a dictionary of headers to use with the request
``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
``params`` url parameters to append to the uri
``timeout`` connection timeout</doc>
<arguments>
<arg>platina</arg>
<arg>${add_group_to_node}</arg>
<arg>json=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:19:54.051" level="INFO">Put Request using : alias=platina, uri=/pccserver/node/update/, data=None,                     headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'}, allow_redirects=True</msg>
<msg timestamp="20190619 22:19:54.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:19:54.051" starttime="20190619 22:19:53.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:54.052" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:19:54.052" starttime="20190619 22:19:54.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:19:54.053" level="INFO">
Response = {u'status': 200, u'path': u'/node/update/', u'message': u'', u'Data': {u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 36, u'ModifiedAt': 1561007607776, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.4.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'', u'Name': u'i99', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'roles': None, u'standby': False, u'SN': u'', u'provisionStatus': u'', u'Id': 26}, u'error': u''}</msg>
<status status="PASS" endtime="20190619 22:19:54.053" starttime="20190619 22:19:54.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:19:54.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:19:54.054" starttime="20190619 22:19:54.053"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60s</arg>
</arguments>
<msg timestamp="20190619 22:20:54.054" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20190619 22:20:54.055" starttime="20190619 22:19:54.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>page=0</arg>
<arg>limit=50</arg>
<arg>sortBy=name</arg>
<arg>sortDir=asc</arg>
<arg>search=</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190619 22:20:54.056" level="INFO">&amp;{data} = { page=0 | limit=50 | sortBy=name | sortDir=asc | search= }</msg>
<status status="PASS" endtime="20190619 22:20:54.056" starttime="20190619 22:20:54.055"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:20:54.213" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:20:54.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:20:54.213" starttime="20190619 22:20:54.056"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190619 22:20:57.214" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190619 22:20:57.214" starttime="20190619 22:20:54.214"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:20:57.368" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:20:57.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:20:57.368" starttime="20190619 22:20:57.215"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190619 22:21:00.369" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20190619 22:21:00.369" starttime="20190619 22:20:57.368"></status>
</kw>
<kw name="Get Request" library="Request">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>platina</arg>
<arg>${get_node_list}</arg>
<arg>params=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190619 22:21:00.491" level="INFO">Get Request using : alias=platina, uri=/pccserver/node/, headers={u'Authorization': u'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2MTYxMTg3MywiaWF0IjoxNTYxMDA3MDczfQ.F9OqFqKwAQkYmuaMhDnXbU_dB1o4JFisJw7t2Zr_YaSCUdnMwjw1ELiG37cw_KiWWeCOJhM5v_rG5GqHZnbtGw'} json=None</msg>
<msg timestamp="20190619 22:21:00.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190619 22:21:00.492" starttime="20190619 22:21:00.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Status code = ${resp.status_code}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:21:00.492" level="INFO">
Status code = 200</msg>
<status status="PASS" endtime="20190619 22:21:00.493" starttime="20190619 22:21:00.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n Response = ${resp.json()}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190619 22:21:00.494" level="INFO">
Response = {u'status': 200, u'links': {u'count': 2, u'pages': 1}, u'error': u'', u'path': u'/node/?search=&amp;limit=50&amp;page=0&amp;sortDir=asc&amp;sortBy=name', u'message': u'', u'Data': [{u'managed': True, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 36, u'ModifiedAt': 1561007607776, u'ready': False, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.4.29', u'Iso_Id': 0, u'sshKeys': None, u'CreatedAt': 1561007114136, u'status': u'Match', u'Name': u'i99', u'tags': None, u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 26, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1561007141729}, u'roles': [17], u'standby': False, u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 26}, {u'managed': False, u'adminUser': u'', u'Type_Id': 0, u'Kernel_Id': 0, u'owner': 1, u'bmcPassword': u'ADMIN', u'ModifiedAt': 1560926697690, u'ready': True, u'console': u'', u'KClusterID': 0, u'ClusterId': None, u'Host': u'172.17.2.29', u'Iso_Id': 0, u'sshKeys': [], u'CreatedAt': 1560926151107, u'status': u'Match', u'bmc': u'172.17.4.29', u'bmcUser': u'ADMIN', u'Name': u'test1', u'tags': [], u'hardwareInventoryId': 0, u'Site_Id': None, u'NodeAuditId': 0, u'Model': u'', u'nodeAvailabilityStatus': {u'nodeId': 24, u'memoryUsage': 0, u'connectionStatus': u'offline', u'cpuUsage': 0, u'usageStatus': u'normal', u'partitionsUsage': None, u'updatedAt': 1560926170862}, u'roles': None, u'standby': False, u'bmcUsers': [u'ADMIN'], u'SN': u'', u'provisionStatus': u'Not provisioned', u'Id': 24}]}</msg>
<status status="PASS" endtime="20190619 22:21:00.494" starttime="20190619 22:21:00.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:21:00.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:21:00.494" starttime="20190619 22:21:00.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['status']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190619 22:21:00.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:21:00.495" starttime="20190619 22:21:00.495"></status>
</kw>
<kw name="Validate Node" library="Data_Parser">
<doc>find added node from node list</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>${node5_name}</arg>
<arg>${node5_host_addr}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${node1_id}</var>
</assign>
<msg timestamp="20190619 22:21:00.497" level="INFO">${status} = True</msg>
<msg timestamp="20190619 22:21:00.497" level="INFO">${node1_id} = 26</msg>
<status status="PASS" endtime="20190619 22:21:00.497" starttime="20190619 22:21:00.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>True</arg>
<arg>msg=node ${node5_name} is not present in node list</arg>
</arguments>
<msg timestamp="20190619 22:21:00.498" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190619 22:21:00.498" starttime="20190619 22:21:00.497"></status>
</kw>
<doc>In advance option user can modify Node related settings</doc>
<tags>
<tag>Node Management</tag>
<tag>regression_test</tag>
<tag>tmp</tag>
</tags>
<status status="PASS" endtime="20190619 22:21:00.498" critical="yes" starttime="20190619 22:19:53.966"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="Request">
<doc>Removes all the session objects</doc>
<msg timestamp="20190619 22:21:00.500" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20190619 22:21:00.500" starttime="20190619 22:21:00.500"></status>
</kw>
<status status="FAIL" endtime="20190619 22:21:00.500" starttime="20190619 22:10:59.008"></status>
</suite>
<statistics>
<total>
<stat fail="5" pass="23">Critical Tests</stat>
<stat fail="5" pass="23">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="6">Node Attributes</stat>
<stat fail="3" pass="5">Node Management</stat>
<stat fail="5" pass="23">regression_test</stat>
<stat fail="2" pass="8">Sites</stat>
<stat fail="0" pass="4">Tenant Mgmt</stat>
<stat fail="0" pass="1">tmp</stat>
</tag>
<suite>
<stat fail="5" id="s1" name="Auto Pcc Regression Suite" pass="23">Auto Pcc Regression Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
