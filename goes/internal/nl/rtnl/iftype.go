// Copyright Â© 2015-2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by the GPL-2 license described in the
// LICENSE file.

package rtnl

import (
	"syscall"
	"unsafe"
)

const (
	IFLA_VLAN_UNSPEC uint16 = iota
	IFLA_VLAN_ID
	IFLA_VLAN_FLAGS
	IFLA_VLAN_EGRESS_QOS
	IFLA_VLAN_INGRESS_QOS
	IFLA_VLAN_PROTOCOL
	N_IFLA_VLAN
)

const IFLA_VLAN_MAX = N_IFLA_VLAN - 1

const SizeofIflaVlanFlags = 4 + 4

type IflaVlanFlags struct {
	Flags uint32
	Mask  uint32
}

func IflaVlanFlagsPtr(b []byte) *IflaVlanFlags {
	return (*IflaVlanFlags)(unsafe.Pointer(&b[0]))
}

func (v IflaVlanFlags) Read(b []byte) (int, error) {
	if len(b) < SizeofIflaVlanFlags {
		return 0, syscall.EOVERFLOW
	}
	*(*IflaVlanFlags)(unsafe.Pointer(&b[0])) = v
	return SizeofIflaVlanFlags, nil
}

const (
	VLAN_FLAG_REORDER_HDR uint32 = 1 << iota
	VLAN_FLAG_GVRP
	VLAN_FLAG_LOOSE_BINDING
	VLAN_FLAG_MVRP
)

const (
	IFLA_VLAN_QOS_UNSPEC uint16 = iota
	IFLA_VLAN_QOS_MAPPING
	N_IFLA_VLAN_QOS
)

const IFLA_VLAN_QOS_MAX = N_IFLA_VLAN_QOS - 1

const SizeofIflaVlanQosMapping = 4 + 4

type IflaVlanQosMapping struct {
	From uint32
	To   uint32
}

func IflaVlanQosMappingPtr(b []byte) *IflaVlanQosMapping {
	return (*IflaVlanQosMapping)(unsafe.Pointer(&b[0]))
}

func (v IflaVlanQosMapping) Read(b []byte) (int, error) {
	if len(b) < SizeofIflaVlanQosMapping {
		return 0, syscall.EOVERFLOW
	}
	*(*IflaVlanQosMapping)(unsafe.Pointer(&b[0])) = v
	return SizeofIflaVlanQosMapping, nil
}

const (
	IFLA_GRE_UNSPEC uint16 = iota
	IFLA_GRE_LINK
	IFLA_GRE_IFLAGS
	IFLA_GRE_OFLAGS
	IFLA_GRE_IKEY
	IFLA_GRE_OKEY
	IFLA_GRE_LOCAL
	IFLA_GRE_REMOTE
	IFLA_GRE_TTL
	IFLA_GRE_TOS
	IFLA_GRE_PMTUDISC
	IFLA_GRE_ENCAP_LIMIT
	IFLA_GRE_FLOWINFO
	IFLA_GRE_FLAGS
	IFLA_GRE_ENCAP_TYPE
	IFLA_GRE_ENCAP_FLAGS
	IFLA_GRE_ENCAP_SPORT
	IFLA_GRE_ENCAP_DPORT
	IFLA_GRE_COLLECT_METADATA
	IFLA_GRE_IGNORE_DF
	IFLA_GRE_FWMARK
	N_IFLA_GRE
)

const IFLA_GRE_MAX = N_IFLA_GRE - 1

const (
	// big-endian
	GRE_CSUM    uint16 = 0x8000
	GRE_ROUTING uint16 = 0x4000
	GRE_KEY     uint16 = 0x2000
	GRE_SEQ     uint16 = 0x1000
	GRE_STRICT  uint16 = 0x0800
	GRE_REC     uint16 = 0x0700
	GRE_ACK     uint16 = 0x0080
	GRE_FLAGS   uint16 = 0x0078
	GRE_VERSION uint16 = 0x0007
)

const (
	IFLA_IPTUN_UNSPEC uint16 = iota
	IFLA_IPTUN_LINK
	IFLA_IPTUN_LOCAL
	IFLA_IPTUN_REMOTE
	IFLA_IPTUN_TTL
	IFLA_IPTUN_TOS
	IFLA_IPTUN_ENCAP_LIMIT
	IFLA_IPTUN_FLOWINFO
	IFLA_IPTUN_FLAGS
	IFLA_IPTUN_PROTO
	IFLA_IPTUN_PMTUDISC
	IFLA_IPTUN_6RD_PREFIX
	IFLA_IPTUN_6RD_RELAY_PREFIX
	IFLA_IPTUN_6RD_PREFIXLEN
	IFLA_IPTUN_6RD_RELAY_PREFIXLEN
	IFLA_IPTUN_ENCAP_TYPE
	IFLA_IPTUN_ENCAP_FLAGS
	IFLA_IPTUN_ENCAP_SPORT
	IFLA_IPTUN_ENCAP_DPORT
	IFLA_IPTUN_COLLECT_METADATA
	N_IFLA_IPTUN
)

const IFLA_IPTUN_MAX = N_IFLA_IPTUN - 1

const (
	TUNNEL_ENCAP_NONE uint16 = iota
	TUNNEL_ENCAP_FOU
	TUNNEL_ENCAP_GUE
)

const (
	TUNNEL_ENCAP_FLAG_CSUM uint16 = 1 << iota
	TUNNEL_ENCAP_FLAG_CSUM6
	TUNNEL_ENCAP_FLAG_REMCSUM
)

const (
	IP6_TNL_F_IGN_ENCAP_LIMIT uint32 = 1 << iota
	IP6_TNL_F_USE_ORIG_TCLASS
	IP6_TNL_F_USE_ORIG_FLOWLABEL
	IP6_TNL_F_MIP6_DEV
	IP6_TNL_F_RCV_DSCP_COPY
	IP6_TNL_F_USE_ORIG_FWMARK
)
const (
	IFLA_IPOIB_UNSPEC uint16 = iota
	IFLA_IPOIB_PKEY
	IFLA_IPOIB_MODE
	IFLA_IPOIB_UMCAST
	N_IFLA_IPOIB
)

const IFLA_IPOIB_MAX = N_IFLA_IPOIB - 1

const (
	IPOIB_MODE_DATAGRAM uint16 = iota
	IPOIB_MODE_CONNECTED
)

const (
	IFLA_VRF_UNSPEC uint16 = iota
	IFLA_VRF_TABLE
	N_IFLA_VRF_MAX
)

const IFLA_VRF_MAX = N_IFLA_VRF_MAX - 1

const (
	IFLA_VRF_PORT_UNSPEC uint16 = iota
	IFLA_VRF_PORT_TABLE
	N_IFLA_VRF_PORT_MAX
)

const IFLA_VRF_PORT_MAX = N_IFLA_VRF_PORT_MAX - 1

const (
	IFLA_VXLAN_UNSPEC uint16 = iota
	IFLA_VXLAN_ID
	IFLA_VXLAN_GROUP
	IFLA_VXLAN_LINK
	IFLA_VXLAN_LOCAL
	IFLA_VXLAN_TTL
	IFLA_VXLAN_TOS
	IFLA_VXLAN_LEARNING
	IFLA_VXLAN_AGEING
	IFLA_VXLAN_LIMIT
	IFLA_VXLAN_PORT_RANGE
	IFLA_VXLAN_PROXY
	IFLA_VXLAN_RSC
	IFLA_VXLAN_L2MISS
	IFLA_VXLAN_L3MISS
	IFLA_VXLAN_PORT
	IFLA_VXLAN_GROUP6
	IFLA_VXLAN_LOCAL6
	IFLA_VXLAN_UDP_CSUM
	IFLA_VXLAN_UDP_ZERO_CSUM6_TX
	IFLA_VXLAN_UDP_ZERO_CSUM6_RX
	IFLA_VXLAN_REMCSUM_TX
	IFLA_VXLAN_REMCSUM_RX
	IFLA_VXLAN_GBP
	IFLA_VXLAN_REMCSUM_NOPARTIAL
	IFLA_VXLAN_COLLECT_METADATA
	IFLA_VXLAN_LABEL
	IFLA_VXLAN_GPE
	N_IFLA_VXLAN
)

const IFLA_VXLAN_MAX = N_IFLA_VXLAN - 1

const SizeofIflaVxlanPortRange = 2 + 2

type IflaVxlanPortRange struct {
	Low, High uint16 // big-endian
}

func (v IflaVxlanPortRange) Read(b []byte) (int, error) {
	if len(b) < SizeofIflaVxlanPortRange {
		return 0, syscall.EOVERFLOW
	}
	b[0] = byte(v.Low >> 8)
	b[1] = byte(v.Low & 0xff)
	b[2] = byte(v.High >> 8)
	b[3] = byte(v.High & 0xff)
	return SizeofIflaVxlanPortRange, nil
}

const (
	IFLA_GENEVE_UNSPEC uint16 = iota
	IFLA_GENEVE_ID
	IFLA_GENEVE_REMOTE
	IFLA_GENEVE_TTL
	IFLA_GENEVE_TOS
	IFLA_GENEVE_PORT
	IFLA_GENEVE_COLLECT_METADATA
	IFLA_GENEVE_REMOTE6
	IFLA_GENEVE_UDP_CSUM
	IFLA_GENEVE_UDP_ZERO_CSUM6_TX
	IFLA_GENEVE_UDP_ZERO_CSUM6_RX
	IFLA_GENEVE_LABEL
	N_IFLA_GENEVE
)

const IFLA_GENEVE_MAX = N_IFLA_GENEVE - 1

const (
	IFLA_MACVLAN_UNSPEC uint16 = iota
	IFLA_MACVLAN_MODE
	IFLA_MACVLAN_FLAGS
	IFLA_MACVLAN_MACADDR_MODE
	IFLA_MACVLAN_MACADDR
	IFLA_MACVLAN_MACADDR_DATA
	IFLA_MACVLAN_MACADDR_COUNT
	N_IFLA_MACVLAN
)

const IFLA_MACVLAN_MAX = N_IFLA_MACVLAN - 1

const (
	MACVLAN_MODE_PRIVATE uint32 = 1 << iota
	MACVLAN_MODE_VEPA
	MACVLAN_MODE_BRIDGE
	MACVLAN_MODE_PASSTHRU
	MACVLAN_MODE_SOURCE
)

const (
	MACVLAN_MACADDR_ADD = iota
	MACVLAN_MACADDR_DEL
	MACVLAN_MACADDR_FLUSH
	MACVLAN_MACADDR_SET
)

const MACVLAN_FLAG_NOPROMISC uint16 = 1

const (
	IFLA_HSR_UNSPEC uint16 = iota
	IFLA_HSR_SLAVE1
	IFLA_HSR_SLAVE2
	IFLA_HSR_MULTICAST_SPEC
	IFLA_HSR_SUPERVISION_ADDR
	IFLA_HSR_SEQ_NR
	IFLA_HSR_VERSION
	N_IFLA_HSR
)

const IFLA_HSR_MAX = N_IFLA_HSR - 1

const (
	IFLA_BR_UNSPEC uint16 = iota
	IFLA_BR_FORWARD_DELAY
	IFLA_BR_HELLO_TIME
	IFLA_BR_MAX_AGE
	IFLA_BR_AGEING_TIME
	IFLA_BR_STP_STATE
	IFLA_BR_PRIORITY
	IFLA_BR_VLAN_FILTERING
	IFLA_BR_VLAN_PROTOCOL
	IFLA_BR_GROUP_FWD_MASK
	IFLA_BR_ROOT_ID
	IFLA_BR_BRIDGE_ID
	IFLA_BR_ROOT_PORT
	IFLA_BR_ROOT_PATH_COST
	IFLA_BR_TOPOLOGY_CHANGE
	IFLA_BR_TOPOLOGY_CHANGE_DETECTED
	IFLA_BR_HELLO_TIMER
	IFLA_BR_TCN_TIMER
	IFLA_BR_TOPOLOGY_CHANGE_TIMER
	IFLA_BR_GC_TIMER
	IFLA_BR_GROUP_ADDR
	IFLA_BR_FDB_FLUSH
	IFLA_BR_MCAST_ROUTER
	IFLA_BR_MCAST_SNOOPING
	IFLA_BR_MCAST_QUERY_USE_IFADDR
	IFLA_BR_MCAST_QUERIER
	IFLA_BR_MCAST_HASH_ELASTICITY
	IFLA_BR_MCAST_HASH_MAX
	IFLA_BR_MCAST_LAST_MEMBER_CNT
	IFLA_BR_MCAST_STARTUP_QUERY_CNT
	IFLA_BR_MCAST_LAST_MEMBER_INTVL
	IFLA_BR_MCAST_MEMBERSHIP_INTVL
	IFLA_BR_MCAST_QUERIER_INTVL
	IFLA_BR_MCAST_QUERY_INTVL
	IFLA_BR_MCAST_QUERY_RESPONSE_INTVL
	IFLA_BR_MCAST_STARTUP_QUERY_INTVL
	IFLA_BR_NF_CALL_IPTABLES
	IFLA_BR_NF_CALL_IP6TABLES
	IFLA_BR_NF_CALL_ARPTABLES
	IFLA_BR_VLAN_DEFAULT_PVID
	IFLA_BR_PAD
	IFLA_BR_VLAN_STATS_ENABLED
	IFLA_BR_MCAST_STATS_ENABLED
	IFLA_BR_MCAST_IGMP_VERSION
	IFLA_BR_MCAST_MLD_VERSION
	N_IFLA_BR
)

const IFLA_BR_MAX = N_IFLA_BR - 1

type IflaBridgeId struct {
	Prio [2]uint8
	Addr [6]uint8
}

const (
	BRIDGE_MODE_UNSPEC = iota
	BRIDGE_MODE_HAIRPIN
)

const (
	IFLA_BRPORT_UNSPEC uint16 = iota
	IFLA_BRPORT_STATE
	IFLA_BRPORT_PRIORITY
	IFLA_BRPORT_COST
	IFLA_BRPORT_MODE
	IFLA_BRPORT_GUARD
	IFLA_BRPORT_PROTECT
	IFLA_BRPORT_FAST_LEAVE
	IFLA_BRPORT_LEARNING
	IFLA_BRPORT_UNICAST_FLOOD
	IFLA_BRPORT_PROXYARP
	IFLA_BRPORT_LEARNING_SYNC
	IFLA_BRPORT_PROXYARP_WIFI
	IFLA_BRPORT_ROOT_ID
	IFLA_BRPORT_BRIDGE_ID
	IFLA_BRPORT_DESIGNATED_PORT
	IFLA_BRPORT_DESIGNATED_COST
	IFLA_BRPORT_ID
	IFLA_BRPORT_NO
	IFLA_BRPORT_TOPOLOGY_CHANGE_ACK
	IFLA_BRPORT_CONFIG_PENDING
	IFLA_BRPORT_MESSAGE_AGE_TIMER
	IFLA_BRPORT_FORWARD_DELAY_TIMER
	IFLA_BRPORT_HOLD_TIMER
	IFLA_BRPORT_FLUSH
	IFLA_BRPORT_MULTICAST_ROUTER
	IFLA_BRPORT_PAD
	IFLA_BRPORT_MCAST_FLOOD
	IFLA_BRPORT_MCAST_TO_UCAST
	IFLA_BRPORT_VLAN_TUNNEL
	N_IFLA_BRPORT
)

const IFLA_BRPORT_MAX = N_IFLA_BRPORT - 1

const (
	IFLA_MACSEC_UNSPEC uint16 = iota
	IFLA_MACSEC_SCI
	IFLA_MACSEC_PORT
	IFLA_MACSEC_ICV_LEN
	IFLA_MACSEC_CIPHER_SUITE
	IFLA_MACSEC_WINDOW
	IFLA_MACSEC_ENCODING_SA
	IFLA_MACSEC_ENCRYPT
	IFLA_MACSEC_PROTECT
	IFLA_MACSEC_INC_SCI
	IFLA_MACSEC_ES
	IFLA_MACSEC_SCB
	IFLA_MACSEC_REPLAY_PROTECT
	IFLA_MACSEC_VALIDATION
	IFLA_MACSEC_PAD
	N_IFLA_MACSEC
)

const IFLA_MACSEC_MAX = N_IFLA_MACSEC - 1

const (
	MACSEC_VALIDATE_DISABLED uint8 = iota
	MACSEC_VALIDATE_CHECK
	MACSEC_VALIDATE_STRICT
	N_MACSEC_VALIDATE
)

const MACSEC_VALIDATE_MAX = N_MACSEC_VALIDATE - 1

const MACSEC_DEFAULT_CIPHER_ID uint64 = 0x0080020001000001
const MACSEC_DEFAULT_CIPHER_ALT uint64 = 0x0080C20001000001
