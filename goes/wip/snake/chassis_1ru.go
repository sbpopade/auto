package main

func (m *snakeTest) platina1RURoute() {
	// leaf_next_hop := [32]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31}
	leaf_next_hop := [32]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 0, 17}
	spine_next_hop := [32]int{24, 23, 3, 4, 5, 6, 7, 25, 9, 10, 11, 12, 13, 14, 1, 16, 17, 18, 19, 20, 21, 22, 8, 15, 2, 26, 27, 28, 29, 30, 31, 0}
	for uid, p := range m.ports_by_uid {
		d := &m.devs[p.dev_index]
		ni := leaf_next_hop[p.port_index]
		if d.role == ROLE_SPINE {
			ni = spine_next_hop[p.port_index]
		}
		n := d.ports[ni]
		m.next_port_uid[uid] = n.uid
	}
}

// Routing table derivation.
// for leaf ths
//   if pi < 16 => pi -> pi + 1
//   else if pi % 2 == 0 pi -> (pi + 2) % 32
//  else pi -> pi
// for spine
//   pi => x[pi]
//   x = [32]int{24, 23, 3, 4, 5, 6, 7, 25, 9, 10, 11, 12, 13, 14, 1, 16, 17, 18, 19, 20, 21, 22, 8, 15, 2, 26, 27, 28, 29, 30, 31, 0}
// for leaf
//   x = [32]int{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,17,20,19,22,21,24,23,26,25,28,27,30,29,0,31}
//
// Chassis topology:
// 0 0 <-> 2 23
// 0 1 <-> 2 15
// 0 2 <-> 2 16
// 0 3 <-> 2 17
// 0 4 <-> 2 18
// 0 5 <-> 2 19
// 0 6 <-> 2 20
// 0 7 <-> 2 21
// 0 8 <-> 2 22
// 0 9 <-> 2 8
// 0 10 <-> 2 9
// 0 11 <-> 2 10
// 0 12 <-> 2 11
// 0 13 <-> 2 12
// 0 14 <-> 2 13
// 0 15 <-> 2 14
// 0 16 <-> 0 17
// 0 18 <-> 0 19
// 0 20 <-> 0 21
// 0 22 <-> 0 23
// 0 24 <-> 0 25
// 0 26 <-> 0 27
// 0 28 <-> 0 29
// 0 30 <-> 0 31
// 1 0 <-> 2 1
// 1 1 <-> 2 2
// 1 2 <-> 2 3
// 1 3 <-> 2 4
// 1 4 <-> 2 5
// 1 5 <-> 2 6
// 1 6 <-> 2 7
// 1 7 <-> 2 25
// 1 8 <-> 2 26
// 1 9 <-> 2 27
// 1 10 <-> 2 28
// 1 11 <-> 2 29
// 1 12 <-> 2 30
// 1 13 <-> 2 31
// 1 14 <-> 2 0
// 1 15 <-> 2 24
// 1 16 <-> 1 17
// 1 18 <-> 1 19
// 1 20 <-> 1 21
// 1 22 <-> 1 23
// 1 24 <-> 1 25
// 1 26 <-> 1 27
// 1 28 <-> 1 29
// 1 30 <-> 1 31

// Snake path takes 96 hops h00 .. h95
// Start sending packets out 0 0 -> h00 2 23
//
// h32 0 0 -> 0 1
// h01 0 1 -> 0 2
// h34 0 2 -> 0 3
// h03 0 3 -> 0 4
// h36 0 4 -> 0 5
// h05 0 5 -> 0 6
// h38 0 6 -> 0 7
// h07 0 7 -> 0 8
// h40 0 8 -> 0 9
// h09 0 9 -> 0 10
// h42 0 10 -> 0 11
// h11 0 11 -> 0 12
// h44 0 12 -> 0 13
// h13 0 13 -> 0 14
// h46 0 14 -> 0 15
// h15 0 15 -> 0 16
// h17 0 16 -> 0 18
// h16 0 17 -> 0 17
// h19 0 18 -> 0 20
// h18 0 19 -> 0 19
// h21 0 20 -> 0 22
// h20 0 21 -> 0 21
// h23 0 22 -> 0 24
// h22 0 23 -> 0 23
// h25 0 24 -> 0 26
// h24 0 25 -> 0 25
// h27 0 26 -> 0 28
// h26 0 27 -> 0 27
// h29 0 28 -> 0 30
// h28 0 29 -> 0 29
// h31 0 30 -> 0 0
// h30 0 31 -> 0 31
// h48 1 0 -> 1 1
// h64 1 1 -> 1 2
// h50 1 2 -> 1 3
// h66 1 3 -> 1 4
// h52 1 4 -> 1 5
// h68 1 5 -> 1 6
// h54 1 6 -> 1 7
// h70 1 7 -> 1 8
// h56 1 8 -> 1 9
// h72 1 9 -> 1 10
// h58 1 10 -> 1 11
// h74 1 11 -> 1 12
// h60 1 12 -> 1 13
// h76 1 13 -> 1 14
// h62 1 14 -> 1 15
// h78 1 15 -> 1 16
// h80 1 16 -> 1 18
// h79 1 17 -> 1 17
// h82 1 18 -> 1 20
// h81 1 19 -> 1 19
// h84 1 20 -> 1 22
// h83 1 21 -> 1 21
// h86 1 22 -> 1 24
// h85 1 23 -> 1 23
// h88 1 24 -> 1 26
// h87 1 25 -> 1 25
// h90 1 26 -> 1 28
// h89 1 27 -> 1 27
// h92 1 28 -> 1 30
// h91 1 29 -> 1 29
// h94 1 30 -> 1 0
// h93 1 31 -> 1 31
// h77 2 0 -> 2 24
// h95 2 1 -> 2 23
// h49 2 2 -> 2 3
// h65 2 3 -> 2 4
// h51 2 4 -> 2 5
// h67 2 5 -> 2 6
// h53 2 6 -> 2 7
// h69 2 7 -> 2 25
// h41 2 8 -> 2 9
// h10 2 9 -> 2 10
// h43 2 10 -> 2 11
// h12 2 11 -> 2 12
// h45 2 12 -> 2 13
// h14 2 13 -> 2 14
// h47 2 14 -> 2 1
// h33 2 15 -> 2 16
// h02 2 16 -> 2 17
// h35 2 17 -> 2 18
// h04 2 18 -> 2 19
// h37 2 19 -> 2 20
// h06 2 20 -> 2 21
// h39 2 21 -> 2 22
// h08 2 22 -> 2 8
// h00 2 23 -> 2 15
// h63 2 24 -> 2 2
// h55 2 25 -> 2 26
// h71 2 26 -> 2 27
// h57 2 27 -> 2 28
// h73 2 28 -> 2 29
// h59 2 29 -> 2 30
// h75 2 30 -> 2.31
// h61 2 31 -> 2 0
