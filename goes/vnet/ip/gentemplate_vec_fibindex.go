// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=ip -id FibIndex -d VecType=FibIndexVec -d Type=FibIndex github.com/platinasystems/go/elib/vec.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ip

import (
	"github.com/platinasystems/go/elib"
)

type FibIndexVec []FibIndex

func (p *FibIndexVec) Resize(n uint) {
	old_cap := uint(cap(*p))
	new_len := uint(len(*p)) + n
	if new_len > old_cap {
		new_cap := elib.NextResizeCap(new_len)
		q := make([]FibIndex, new_len, new_cap)
		copy(q, *p)
		*p = q
	}
	*p = (*p)[:new_len]
}

func (p *FibIndexVec) validate(new_len uint, zero FibIndex) *FibIndex {
	old_cap := uint(cap(*p))
	old_len := uint(len(*p))
	if new_len <= old_cap {
		// Need to reslice to larger length?
		if new_len > old_len {
			*p = (*p)[:new_len]
			for i := old_len; i < new_len; i++ {
				(*p)[i] = zero
			}
		}
		return &(*p)[new_len-1]
	}
	return p.validateSlowPath(zero, old_cap, new_len, old_len)
}

func (p *FibIndexVec) validateSlowPath(zero FibIndex, old_cap, new_len, old_len uint) *FibIndex {
	if new_len > old_cap {
		new_cap := elib.NextResizeCap(new_len)
		q := make([]FibIndex, new_cap, new_cap)
		copy(q, *p)
		for i := old_len; i < new_cap; i++ {
			q[i] = zero
		}
		*p = q[:new_len]
	}
	if new_len > old_len {
		*p = (*p)[:new_len]
	}
	return &(*p)[new_len-1]
}

func (p *FibIndexVec) Validate(i uint) *FibIndex {
	var zero FibIndex
	return p.validate(i+1, zero)
}

func (p *FibIndexVec) ValidateInit(i uint, zero FibIndex) *FibIndex {
	return p.validate(i+1, zero)
}

func (p *FibIndexVec) ValidateLen(l uint) (v *FibIndex) {
	if l > 0 {
		var zero FibIndex
		v = p.validate(l, zero)
	}
	return
}

func (p *FibIndexVec) ValidateLenInit(l uint, zero FibIndex) (v *FibIndex) {
	if l > 0 {
		v = p.validate(l, zero)
	}
	return
}

func (p *FibIndexVec) ResetLen() {
	if *p != nil {
		*p = (*p)[:0]
	}
}

func (p FibIndexVec) Len() uint { return uint(len(p)) }
