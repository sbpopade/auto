// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// generated by stringer -type=Capability,ExtCapability,HeaderType; DO NOT EDIT

package pci

import "fmt"

const _Capability_name = "PowerManagementAGPVitalProductDataSlotIdentificationMSICompactPCIHotSwapPCIXHyperTransportVendorSpecificDebugPortCompactPciCentralControlPCIHotPlugControllerSSVIDAGP3SecureDevicePCIEMSIXSATAAdvancedFeatures"

var _Capability_index = [...]uint8{0, 15, 18, 34, 52, 55, 72, 76, 90, 104, 113, 137, 157, 162, 166, 178, 182, 186, 190, 206}

func (i Capability) String() string {
	i -= 1
	if i >= Capability(len(_Capability_index)-1) {
		return fmt.Sprintf("Capability(%d)", i+1)
	}
	return _Capability_name[_Capability_index[i]:_Capability_index[i+1]]
}

const _ExtCapability_name = "AdvancedErrorReportingVirtualChannelDeviceSerialNumberPowerBudgetingRootComplexLinkDeclarationRootComplexInternalLinkControlRootComplexEventCollectorMultiFunctionVCVirtualChannel9RootComplexRBExtVendorSpecificConfigAccessAccessControlServicesAlternateRoutingIDAddressTranslationServicesSingleRootIOVirtualizationMultiRootIOVirtualizationMulticastPageRequestInterfaceReservedAMDResizableBARDynamicPowerAllocationTPHRequesterLatencyToleranceReportingSecondaryPCIeCapabilityProtocolMultiplexingProcessAddressSpaceID"

var _ExtCapability_index = [...]uint16{0, 22, 36, 54, 68, 94, 124, 149, 164, 179, 192, 209, 221, 242, 260, 286, 312, 337, 346, 366, 377, 389, 411, 423, 448, 471, 491, 512}

func (i ExtCapability) String() string {
	i -= 1
	if i >= ExtCapability(len(_ExtCapability_index)-1) {
		return fmt.Sprintf("ExtCapability(%d)", i+1)
	}
	return _ExtCapability_name[_ExtCapability_index[i]:_ExtCapability_index[i+1]]
}

const _HeaderType_name = "NormalBridgeCardBus"

var _HeaderType_index = [...]uint8{0, 6, 12, 19}

func (i HeaderType) String() string {
	if i >= HeaderType(len(_HeaderType_index)-1) {
		return fmt.Sprintf("HeaderType(%d)", i)
	}
	return _HeaderType_name[_HeaderType_index[i]:_HeaderType_index[i+1]]
}
