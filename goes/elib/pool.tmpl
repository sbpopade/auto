{{/* -*- mode: Go -*- */}}
// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{{if ne .TAGS ""}}
// +build {{.TAGS}}
{{end}}

{{define "elib"}}{{if ne . "elib"}}elib.{{end}}{{end}}

package {{.Package}}

{{if ne .Package "elib"}}
import (
	"github.com/platinasystems/go/elib"
)
{{end}}

type {{.PoolType}} struct {
	{{template "elib" .Package}}Pool
	{{.Data}} []{{.Type}}
}

func (p * {{.PoolType}}) GetIndex() (i uint) {
	l := uint(len(p.{{.Data}}))
	i = p.Pool.GetIndex(l)
	if i >= l {
		p.Validate(i)
	}
	return i
}

func (p * {{.PoolType}}) PutIndex(i uint) (ok bool) {
	return p.Pool.PutIndex(i)
}

func (p * {{.PoolType}}) IsFree(i uint) (v bool) {
	v = i >= uint(len(p.{{.Data}}))
	if !v {
		v = p.Pool.IsFree(i)
	}
	return
}

func (p * {{.PoolType}}) Resize(n uint) {
	c := uint(cap(p.{{.Data}}))
	l := uint(len(p.{{.Data}}) + int(n))
	if l > c {
		c = {{template "elib" .Package}}NextResizeCap(l)
		q := make([]{{.Type}}, l, c)
		copy(q, p.{{.Data}})
		p.{{.Data}} = q
	}
	p.{{.Data}} = p.{{.Data}}[:l]
}

func (p * {{.PoolType}}) Validate(i uint) {
	c := uint(cap(p.{{.Data}}))
	l := uint(i) + 1
	if l > c {
		c = {{template "elib" .Package}}NextResizeCap(l)
		q := make([]{{.Type}}, l, c)
		copy(q, p.{{.Data}})
		p.{{.Data}} = q
	}
	if l > uint(len(p.{{.Data}})) {
		p.{{.Data}} = p.{{.Data}}[:l]
	}
}

func (p * {{.PoolType}}) Elts() uint {
	return uint(len(p.{{.Data}})) - p.FreeLen()
}

func (p * {{.PoolType}}) Len() uint {
	return uint(len(p.{{.Data}}))
}

func (p * {{.PoolType}}) Foreach(f func(x {{.Type}})) {
	for i := range p.{{.Data}} {
		if !p.Pool.IsFree(uint(i)) {
			f(p.{{.Data}}[i])
		}
	}
}

func (p * {{.PoolType}}) ForeachIndex(f func(i uint)) {
	for i := range p.{{.Data}} {
		if !p.Pool.IsFree(uint(i)) {
			f(uint(i))
		}
	}
}

func (p * {{.PoolType}}) Reset() {
	p.Pool.Reset()
	if len(p.{{.Data}}) > 0 {
		p.{{.Data}} = p.{{.Data}}[:0]
	}
}
