
// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{{/* -*- mode: Go -*- */}}

{{if ne .TAGS ""}}
// +build {{.TAGS}}
{{end}}

{{define "elib"}}{{if ne . "elib"}}elib.{{end}}{{end}}
{{$package := .Package}}
{{$pool_type := .pool_type}}
{{$id := .ID}}

package {{.Package}}

import (
	{{if ne .Package "elib"}}"github.com/platinasystems/go/elib"{{end}}
	"fmt"
)

{{define "index_type"}}{{.}}_index__{{end}}
{{define "interface_type"}}{{.}}_intf__{{.}}{{end}}

type {{template "interface_type" $id}} interface {
	__is_{{$id}} ()
}

type {{.pool_type}} struct { {{template "elib" $package}}TypedPool }

func (p *{{.pool_type}}) init() {
	if ! p.IsInitialized() {
		p.Init({{range $i, $e := .types}}{{if $i}},{{end}}{{$e}}{}{{end}})
	}
}

func (p *{{.pool_type}}) data(i {{template "elib" .Package}}TypedPoolIndex) {{template "interface_type" $id}} {
	t, x := p.Data(i)
	switch t {
		{{range $i, $e := .types}}case 1+{{$i}}: return (*{{$e}})(x);{{end}}
	default:
		panic(fmt.Errorf("unknown type %d", t))
	}
	return nil
}

{{range $i, $e := .types}}

type {{template "index_type" $e}} {{template "elib" $package}}TypedPoolIndex

func (x *{{$e}}) __is_{{$id}} () {}

func (p *{{$pool_type}}) get_{{$e}}() {{template "index_type" $e}} {
	p.init()
	return {{template "index_type" $e}}(p.GetIndex(1+{{$i}}))
}

func (p *{{$pool_type}}) data_{{$e}}(i {{template "index_type" $e}}) *{{$e}} {
	return (*{{$e}})(p.GetData(1+{{$i}}, {{template "elib" $package}}TypedPoolIndex(i)))
}

func (i {{template "index_type" $e}}) data(p *{{$pool_type}}) *{{$e}}    {
	return p.data_{{$e}}(i)
}

func (i {{template "index_type" $e}}) put(p *{{$pool_type}}) bool    {
	return p.PutIndex(1+{{$i}}, {{template "elib" $package}}TypedPoolIndex(i))
}
{{end}}


