// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=elib -id Bitmap -d PoolType=BitmapPool -d Type=WordVec -d Data=bitmaps pool.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package elib

type BitmapPool struct {
	Pool
	bitmaps []WordVec
}

func (p *BitmapPool) GetIndex() (i uint) {
	l := uint(len(p.bitmaps))
	i = p.Pool.GetIndex(l)
	if i >= l {
		p.Validate(i)
	}
	return i
}

func (p *BitmapPool) PutIndex(i uint) (ok bool) {
	return p.Pool.PutIndex(i)
}

func (p *BitmapPool) IsFree(i uint) (v bool) {
	v = i >= uint(len(p.bitmaps))
	if !v {
		v = p.Pool.IsFree(i)
	}
	return
}

func (p *BitmapPool) Resize(n uint) {
	c := uint(cap(p.bitmaps))
	l := uint(len(p.bitmaps) + int(n))
	if l > c {
		c = NextResizeCap(l)
		q := make([]WordVec, l, c)
		copy(q, p.bitmaps)
		p.bitmaps = q
	}
	p.bitmaps = p.bitmaps[:l]
}

func (p *BitmapPool) Validate(i uint) {
	c := uint(cap(p.bitmaps))
	l := uint(i) + 1
	if l > c {
		c = NextResizeCap(l)
		q := make([]WordVec, l, c)
		copy(q, p.bitmaps)
		p.bitmaps = q
	}
	if l > uint(len(p.bitmaps)) {
		p.bitmaps = p.bitmaps[:l]
	}
}

func (p *BitmapPool) Elts() uint {
	return uint(len(p.bitmaps)) - p.FreeLen()
}

func (p *BitmapPool) Len() uint {
	return uint(len(p.bitmaps))
}

func (p *BitmapPool) Foreach(f func(x WordVec)) {
	for i := range p.bitmaps {
		if !p.Pool.IsFree(uint(i)) {
			f(p.bitmaps[i])
		}
	}
}

func (p *BitmapPool) ForeachIndex(f func(i uint)) {
	for i := range p.bitmaps {
		if !p.Pool.IsFree(uint(i)) {
			f(uint(i))
		}
	}
}

func (p *BitmapPool) Reset() {
	p.Pool.Reset()
	if len(p.bitmaps) > 0 {
		p.bitmaps = p.bitmaps[:0]
	}
}
