---

- include: ../../playbooks/installation/uninstall_packages.yml

- include: ../../playbooks/installation/quagga_install.yml


- hosts: leaf:spine
  become: true
  ignore_errors: yes
  tasks:
    - shell: dpkg --list | grep kernel
      register: kernel_version

    - debug:
        var: kernel_version.stdout_lines


- hosts: server_emulator
  become: true

  tasks:
    - command: "date +%Y%m%d%T"
      register: start_time

    - set_fact:
        hash_name: "docker_quagga_ospf_traffic_subports_{{ start_time.stdout }}"
        start_time: "{{ start_time.stdout }}"


- hosts: leaf:spine
  become: true
  tasks:
    - name: Pull quagga container image from dockerhub
      command: "docker pull stigt/debian-quagga:latest"

    - name: Install docker compose
      shell: "curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose"

    - name: Make docker-compose file executable
      shell: "chmod +x /usr/local/bin/docker-compose"

    - file:
        path: "{{ docker_compose_file }}"
        state: touch

    - name: Create docker-compose file
      lineinfile:
        path: "{{ docker_compose_file }}"
        line: "{{ item }}"
      with_items:
      - "version: '3'"
      - "services:"

    - name: Add docker_move.sh
      copy:
        src: ../../templates/docker_move.sh
        dest: "~/docker_move.sh"      
        owner: root
        group: root
        mode: 0755

    - name: Take backup of /etc/network/interfaces
      copy:
        src: "{{ network_interfaces_file }}"
        dest: "{{ network_interfaces_file_bck }}"
        remote_src: true

    - name: Copy subports provisioned network interfaces file
      copy:
        src: "../../files/{{inventory_hostname}}/subports_interfaces"
        dest: "{{ network_interfaces_file }}"

    - name: Execute commands
      command: "{{ item }}"
      with_items:
      - 'rmmod platina-mk1'
      - 'modprobe platina-mk1 provision=4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1'
      - 'ifdown -a --allow vnet'
      - 'ifup -a --allow vnet'
      - 'goes restart'
      ignore_errors: yes


- hosts: leaf[0]
  become: true
  ignore_errors: yes

  vars:
  - containers: ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13', 'S14', 'S15', 'S16', 'S17', 'S18', 'S19', 'S20', 'S21', 'S22', 'S23', 'S24', 'S25', 'S26', 'S27', 'S28', 'S29', 'S30', 'S31', 'S32']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2' first_octet1='10' first_octet2='13' first_octet3='15'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        switch_name: "{{ inventory_hostname }}"
        spine_list: "{{ groups['spine'] }}"
        leaf_list: "{{ groups['leaf'] }}"
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        is_subports: True
        state: 'up'
      with_items:
      - "{{ containers }}"

    - name: Wait few seconds for docker to up
      pause:
        seconds: 10

- hosts: leaf[1]
  become: true
  ignore_errors: yes

  vars:
  - containers: ['S33', 'S34', 'S35', 'S36', 'S37', 'S38', 'S39', 'S40', 'S41', 'S42', 'S43', 'S44', 'S45', 'S46', 'S47', 'S48', 'S49', 'S50', 'S51', 'S52', 'S53', 'S54', 'S55', 'S56', 'S57', 'S58', 'S59', 'S60', 'S61', 'S62', 'S63', 'S64']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2' first_octet1='12' first_octet2='11' first_octet3='15'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        switch_name: "{{ inventory_hostname }}"
        spine_list: "{{ groups['spine'] }}"
        leaf_list: "{{ groups['leaf'] }}"
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        is_subports: True
        state: 'up'
      with_items:
      - "{{ containers }}"

    - name: Wait few seconds for docker to up
      pause:
        seconds: 10

- hosts: spine[0]
  become: true
  ignore_errors: yes

  vars:
  - containers: ['S65', 'S66', 'S67', 'S68', 'S69', 'S70', 'S71', 'S72', 'S73', 'S74', 'S75', 'S76', 'S77', 'S78', 'S79', 'S80', 'S81', 'S82', 'S83', 'S84', 'S85', 'S86', 'S87', 'S88', 'S89', 'S90', 'S91', 'S92', 'S93', 'S94', 'S95', 'S96']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2' first_octet1='10' first_octet2='11' first_octet3='15'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        switch_name: "{{ inventory_hostname }}"
        spine_list: "{{ groups['spine'] }}"
        leaf_list: "{{ groups['leaf'] }}"
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        is_subports: True
        state: 'up'
      with_items:
      - "{{ containers }}"

    - name: Wait few seconds for docker to up
      pause:
        seconds: 10

- hosts: spine[1]
  become: true
  ignore_errors: yes

  vars:
  - container: S97
  - containers: ['S97', 'S98', 'S99', 'S100', 'S101', 'S102', 'S103', 'S104', 'S105', 'S106', 'S107', 'S108', 'S109', 'S110', 'S111', 'S112', 'S113', 'S114', 'S115', 'S116', 'S117', 'S118', 'S119', 'S120', 'S121', 'S122', 'S123', 'S124', 'S125', 'S126', 'S127', 'S128']
  - first_octet1: '12'
  - first_octet2: '13'
  - first_octet3: '15'

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2' first_octet1='12' first_octet2='13' first_octet3='15'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        switch_name: "{{ inventory_hostname }}"
        spine_list: "{{ groups['spine'] }}"
        leaf_list: "{{ groups['leaf'] }}"
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        is_subports: True
        state: 'up'
      with_items:
      - "{{ containers }}"
    
    - name: Wait few seconds for docker to up
      pause:
        seconds: 30

    - file:
        path: "{{ docker_log_dir }}"
        state: directory

    - include_vars:
        file: ../../group_vars/{{ inventory_hostname }}/{{ container }}

    - name: Verify quagga ospf traffic inside S97 container
      test_docker_ospf:
        switch_name: "{{ inventory_hostname }}"     
        neighbor_invaders: "{{ groups['leaf'] }}"
        container: "{{ container }}"
        config_file: "{{ lookup('template', '../../templates/ospfd.conf.j2') }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ docker_log_dir }}"
      register: module_out

    - command: "date +%Y%m%d%T"
      register: end_time

    - name: Fetch the log file
      slurp:
        src: "{{ module_out.log_file_path }}"
      register: logs

    - name: Store the test result in a hash in redis db on server emulator
      store_result_in_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        start_time: "{{ hostvars['server_emulator']['start_time'] }}"
        end_time: "{{ end_time.stdout }}"
        hash_dict: "{{ module_out.hash_dict }}"
        log_content: "{{ logs['content'] | b64decode }}"
      delegate_to: 127.0.0.1

    - copy:
        src: "../../files/show_tech.py"
        dest: /tmp/show_tech.py
        mode: 0755
      when: module_out.hash_dict['result.status'] == "Failed"
      ignore_errors: yes

    - command: "/tmp/./show_tech.py --path /var/log/show_tech/ --hash_name {{ hostvars['server_emulator']['hash_name'] }}"
      when: module_out.hash_dict['result.status'] == "Failed"
      ignore_errors: yes

    - file:
        path: /tmp/show_tech.py
        state: absent
      when: module_out.hash_dict['result.status'] == "Failed"
      ignore_errors: yes


- hosts: leaf:spine
  become: true
  tasks:
    - include: ../../playbooks/get_goes_version_and_tags.yml


- include: quagga_ospf_traffic_subports_reset.yml
  when: reset_config


- hosts: server_emulator
  become: true
  tasks:
    - name: Get the test result from redis db
      get_test_result_from_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
      register: result

    - name: Print test case result
      debug:
        msg: "Test case result: {{ result.result_status }}"

    - name: Print failure summary
      debug:
        msg: "Failure summary: {{ result.result_detail }}"

    - lineinfile:
        path: "{{ regression_summary_report }}"
        line: "{{ hash_name }}: {{ result.result_status }}"


- hosts: leaf:spine
  become: true
  tasks:
    - include: ../../playbooks/get_goes_status.yml start_time={{ hostvars['server_emulator']['start_time'] }} hash_name={{ hostvars['server_emulator']['hash_name'] }}
