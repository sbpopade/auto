---

- hosts: leaf:spine
  become: true
  ignore_errors: yes
  tasks:
    - shell: dpkg --list | grep kernel
      register: kernel_version
      when: not dry_run

    - debug:
        var: kernel_version.stdout_lines
      when: not dry_run


- hosts: server_emulator
  become: true

  tasks:
    - command: "date +%Y%m%d%T"
      register: start_time

    - set_fact:
        hash_name: "issue_137_{{ start_time.stdout }}"
        start_time: "{{ start_time.stdout }}"


- hosts: leaf[0]:spine[0]
  become: true
  tasks:
    - file:
        path: "{{ port_provision_log_dir }}"
        state: directory
      when: not dry_run

    - name: Copy port provisioned interfaces file to /etc/network/interfaces
      template:
        src: "../../files/{{ inventory_hostname }}/issue_137.conf"
        dest: "{{ network_interfaces_file }}"
      when: not dry_run

    - name: Copy goesd-platina-mk1-modprobe.conf file
      template:
        src: "../../files/{{ inventory_hostname }}/issue_137_modprobe.conf"
        dest: "{{ goesd_modprobe_file }}"
      when: not dry_run

    - name: Update interfaces file for fiber ports
      test_fiber_ports:
        cmd : "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
      register: fmodule_out

    - name: Execute commands
      command: "{{ item }}"
      with_items:
      - 'rmmod platina-mk1'
      - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
      - 'ifdown -a --allow vnet'
      - 'ifup -a --allow vnet'
      - 'goes restart'
      when: not dry_run

    - set_fact:
        commands: "{{ item }}"
      with_items:
      - 'rmmod platina-mk1'
      - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
      - 'ifdown -a --allow vnet'
      - 'ifup -a --allow vnet'
      - 'goes restart'
      when: dry_run

    - name: Wait few seconds for GOES to come up
      pause:
        seconds: 10
      when: not dry_run

    - name: Check goes status
      restart_and_check_goes_status:
        is_restart: False
        is_network_status: True
        switch_name: "{{ inventory_hostname }}"
        restart_count: 1
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ issues_log_dir }}"
      register: module_out

    - name: verify port-provisioned port parameters
      test_issue137:
        port: 3
        switch_name: "{{ inventory_hostname }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ issues_log_dir }}"
      register: module_out


- hosts: spine[0]
  become: true
  tasks:
    - name: Copy port provisioned interfaces file to /etc/network/interfaces
      template:
        src: "../../files/{{inventory_hostname}}/issue_137_1.conf"
        dest: "{{ network_interfaces_file }}"
      when: not dry_run


- hosts: leaf[0]:spine[0]
  become: true
  tasks:
    - name: Execute commands
      command: "{{ item }}"
      with_items:
        - 'rmmod platina-mk1'
        - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
        - 'ifdown -a --allow vnet'
        - 'ifup -a --allow vnet'
        - 'goes restart'
      when: not dry_run

    - set_fact:
        commands: "{{ item }}"
      with_items:
        - 'rmmod platina-mk1'
        - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
        - 'ifdown -a --allow vnet'
        - 'ifup -a --allow vnet'
        - 'goes restart'
      when: dry_run

    - name: Check goes status
      restart_and_check_goes_status:
        is_restart: False
        is_network_status: True
        switch_name: "{{ inventory_hostname }}"
        restart_count: 1
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ issues_log_dir }}"
      register: module_out

    - name: verify port-provisioned port parameters
      test_issue137:
        port: 3
        switch_name: "{{ inventory_hostname }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ issues_log_dir }}"
        spine_list: "{{ groups['spine'] }}"
        autoneg: 'on'
      register: module_out

    - command: "date +%Y%m%d%T"
      register: end_time

    - name: Fetch the log file
      slurp:
        src: "{{ module_out.log_file_path }}"
      register: logs

    - name: Store the test result in a hash in redis db on server emulator
      store_result_in_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        start_time: "{{ hostvars['server_emulator']['start_time'] }}"
        end_time: "{{ end_time.stdout }}"
        hash_dict: "{{ module_out.hash_dict }}"
        log_content: "{{ logs['content'] | b64decode }}"
      delegate_to: 127.0.0.1

    - copy:
        src: "../../files/show_tech.py"
        dest: /tmp/show_tech.py
        mode: 0755
      when: module_out.hash_dict['result.status'] == "Failed"
      ignore_errors: yes

    - command: "/tmp/./show_tech.py --path /var/log/show_tech/ --hash_name {{ hostvars['server_emulator']['hash_name'] }}"
      when: module_out.hash_dict['result.status'] == "Failed"
      ignore_errors: yes

    - file:
        path: /tmp/show_tech.py
        state: absent
      when: module_out.hash_dict['result.status'] == "Failed"
      ignore_errors: yes


- include: ../../playbooks/issues/issue_137_reset.yml


- hosts: server_emulator
  become: true
  tasks:
    - name: Get the test result from redis db
      get_test_result_from_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
      register: result

    - name: Print test case result
      debug:
        msg: "Test case result: {{ result.result_status }}"

    - name: Print failure summary
      debug:
        msg: "Failure summary: {{ result.result_detail }}"

    - lineinfile:
        path: "{{ regression_summary_report }}"
        line: "{{ hash_name }}: {{ result.result_status }}"
